{"version":3,"file":"Pixim-box2d.js","sources":["../src/pixim/Conf.ts","../src/pixim/Box2dAlias.ts","../src/pixim/World.ts","../src/pixim/Box2dObject.ts","../src/pixim/Circle.ts","../src/pixim/Rectangle.ts","../src/pixim/core.ts","../src/pixim/events.ts"],"sourcesContent":["import { Ticker } from 'pixi.js';\r\n\r\nnamespace Pixim {\r\n\texport namespace box2d {\r\n\t\texport interface IInitOption {\r\n\t\t\t/**\r\n\t\t\t * Ticker that synchronizes the processing of box2dweb.\r\n\t\t\t * \r\n\t\t\t * @see http://pixijs.download/v5.3.2/docs/PIXI.Ticker_.html\r\n\t\t\t */\r\n\t\t\tticker?: Ticker\r\n\t\t};\r\n\t}\r\n}\r\n\r\n/**\r\n * @ignore\r\n */\r\nexport const Box2dToPixi = 30;\r\n\r\n/**\r\n * @ignore\r\n */\r\nexport const PixiToBox2d = 1 / Box2dToPixi;\r\n\r\n/**\r\n * @ignore\r\n */\r\nexport import IInitOption = Pixim.box2d.IInitOption;\r\n\r\n/**\r\n * @ignore\r\n */\r\nexport const initOption: Pixim.box2d.IInitOption = {\r\n\tticker: null\r\n};","import { Dynamics, Collision, Common } from 'box2dweb';\r\n\r\n/**\r\n * @ignore\r\n */\r\nexport import Vec2 = Common.Math.b2Vec2;\r\n\r\n/**\r\n * @ignore\r\n */\r\nexport import DebugDraw = Dynamics.b2DebugDraw;\r\n\r\n/**\r\n * @ignore\r\n */\r\nexport import World = Dynamics.b2World;\r\n\r\n/**\r\n * @ignore\r\n */\r\nexport import Contact = Dynamics.Contacts.box2dContact;\r\n\r\n/**\r\n * @ignore\r\n */\r\nexport import ContactListener = Dynamics.b2ContactListener;\r\n\r\n/**\r\n * @ignore\r\n */\r\nexport import BodyDef = Dynamics.b2BodyDef;\r\n\r\n/**\r\n * @ignore\r\n */\r\nexport import FixtureDef = Dynamics.b2FixtureDef;\r\n\r\n/**\r\n * @ignore\r\n */\r\nexport import Body = Dynamics.b2Body;\r\n\r\n/**\r\n * @ignore\r\n */\r\nexport import CircleShape = Collision.Shapes.b2CircleShape;\r\n\r\n/**\r\n * @ignore\r\n */\r\nexport import PolygonShape = Collision.Shapes.b2PolygonShape;","import { Application, Ticker } from 'pixi.js';\r\nimport * as _Pixim from '@tawaship/pixim.js';\r\nimport { Vec2, World as _World, Contact, ContactListener } from './Box2dAlias';\r\nimport { Box2dObject } from './Box2dObject';\r\nimport { initOption, Box2dToPixi, PixiToBox2d } from './Conf';\r\n\r\nnamespace Pixim {\r\n\texport namespace box2d {\r\n\t\texport interface IBox2dWorldData {\r\n\t\t\tworld: _World,\r\n\t\t\tlistener: ContactListener,\r\n\t\t\tenabled: boolean,\r\n\t\t\tspeed: number,\r\n\t\t\ttargets: { [id: number]: Box2dObject },\r\n\t\t\tdeletes: { [id: number]: Box2dObject },\r\n\t\t\tticker?: Ticker\r\n\t\t};\r\n\t\t\r\n\t\texport interface IBox2dWorldOption {\r\n\t\t\tgravityX?: number,\r\n\t\t\tgravityY?: number,\r\n\t\t\tallowSleep?: boolean,\r\n\t\t\tlistenBeginContact?: boolean,\r\n\t\t\tlistenEndContact?: boolean,\r\n\t\t\tlistenPreSolve?: boolean,\r\n\t\t\tlistenPostSolve?: boolean,\r\n\t\t\tticker?: Ticker\r\n\t\t};\r\n\t\t\r\n\t\t/**\r\n\t\t * @ignore\r\n\t\t */\r\n\t\tfunction beginContactHandler(contact: Contact) {\r\n\t\t\tconst dataA = contact.GetFixtureA().GetUserData();\r\n\t\t\tconst dataB = contact.GetFixtureB().GetUserData();\r\n\t\t\t\r\n\t\t\tdataA && dataA.emit && dataA.emit('BeginContact', dataB);\r\n\t\t\tdataB && dataB.emit && dataB.emit('BeginContact', dataA);\r\n\t\t}\r\n\t\t\r\n\t\t/**\r\n\t\t * @ignore\r\n\t\t */\r\n\t\tfunction endContactHandler(contact: Contact) {\r\n\t\t\tconst dataA = contact.GetFixtureA().GetUserData();\r\n\t\t\tconst dataB = contact.GetFixtureB().GetUserData();\r\n\t\t\t\r\n\t\t\tdataA && dataA.emit && dataA.emit('EndContact', dataB);\r\n\t\t\tdataB && dataB.emit && dataB.emit('EndContact', dataA);\r\n\t\t}\r\n\t\t\r\n\t\t/**\r\n\t\t * @ignore\r\n\t\t */\r\n\t\tfunction preSolveHandler(contact: Contact) {\r\n\t\t\tconst dataA = contact.GetFixtureA().GetUserData();\r\n\t\t\tconst dataB = contact.GetFixtureB().GetUserData();\r\n\t\t\t\r\n\t\t\tdataA && dataA.emit && dataA.emit('PreSolve', dataB);\r\n\t\t\tdataB && dataB.emit && dataB.emit('PreSolve', dataA);\r\n\t\t}\r\n\t\t\r\n\t\t/**\r\n\t\t * @ignore\r\n\t\t */\r\n\t\tfunction postSolveHandler(contact: Contact) {\r\n\t\t\tconst dataA = contact.GetFixtureA().GetUserData();\r\n\t\t\tconst dataB = contact.GetFixtureB().GetUserData();\r\n\t\t\t\r\n\t\t\tdataA && dataA.emit && dataA.emit('PostSolve', dataB);\r\n\t\t\tdataB && dataB.emit && dataB.emit('PostSolve', dataA);\r\n\t\t}\r\n\t\t\r\n\t\t/**\r\n\t\t * @see https://tawaship.github.io/Pixim.js/classes/pixim.container.html\r\n\t\t */\r\n\t\texport class World extends _Pixim.Container {\r\n\t\t\tprivate _box2dData: IBox2dWorldData;\r\n\t\t\t\r\n\t\t\tconstructor(options: IBox2dWorldOption = {}) {\r\n\t\t\t\tsuper();\r\n\t\t\t\t\r\n\t\t\t\tconst gravityX = typeof(options.gravityX) === 'number' ? options.gravityX : 0;\r\n\t\t\t\tconst gravityY = typeof(options.gravityY) === 'number' ? options.gravityY : 9.8;\r\n\t\t\t\tconst allowSleep = !!options.allowSleep;\r\n\t\t\t\t\r\n\t\t\t\tconst world = new _World(new Vec2(gravityX, gravityY), allowSleep);\r\n\t\t\t\t\r\n\t\t\t\tthis._box2dData = {\r\n\t\t\t\t\tworld,\r\n\t\t\t\t\tlistener: new ContactListener(),\r\n\t\t\t\t\tenabled: true,\r\n\t\t\t\t\tspeed: 1,\r\n\t\t\t\t\ttargets: {},\r\n\t\t\t\t\tdeletes: {},\r\n\t\t\t\t\tticker: options.ticker\r\n\t\t\t\t};\r\n\t\t\t\t\r\n\t\t\t\tthis.on('added', () => {\r\n\t\t\t\t\tthis._box2dData.ticker = this._box2dData.ticker || initOption.ticker;\r\n\t\t\t\t\tthis._box2dData.ticker.add(this._handleTick, this);\r\n\t\t\t\t});\r\n\t\t\t\t\r\n\t\t\t\tthis.on('removed', () => {\r\n\t\t\t\t\tthis._box2dData.ticker.remove(this._handleTick, this);\r\n\t\t\t\t});\r\n\t\t\t\t\r\n\t\t\t\tconst listener = this._box2dData.listener;\r\n\t\t\t\tif (options.listenBeginContact) {\r\n\t\t\t\t\tlistener.BeginContact = beginContactHandler;\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\tif (options.listenEndContact) {\r\n\t\t\t\t\tlistener.EndContact = endContactHandler;\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\tif (options.listenPreSolve) {\r\n\t\t\t\t\tlistener.PreSolve = preSolveHandler;\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\tif (options.listenPostSolve) {\r\n\t\t\t\t\tlistener.PostSolve = postSolveHandler;\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\tworld.SetContactListener(listener);\r\n\t\t\t\t\r\n\t\t\t\tthis.box2dEnabled = true\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tprivate _handleTick(delta: number) {\r\n\t\t\t\tif (!this._box2dData.enabled) {\r\n\t\t\t\t\treturn;\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\tconst world = this._box2dData.world;\r\n\t\t\t\t\r\n\t\t\t\tworld.Step(delta * this._box2dData.speed / 30, 10, 10);\r\n\t\t\t\tworld.ClearForces();\r\n\t\t\t\tworld.DrawDebugData();\r\n\t\t\t\t\r\n\t\t\t\tconst targets = this._box2dData.targets;\r\n\t\t\t\t\r\n\t\t\t\tfor (let i in this._box2dData.deletes) {\r\n\t\t\t\t\tconst b2d = this._box2dData.deletes[i];\r\n\t\t\t\t\tdelete(targets[i]);\r\n\t\t\t\t\tworld.DestroyBody(b2d.body);\r\n\t\t\t\t\tb2d.body = null;\r\n\t\t\t\t}\r\n\t\t\t\tthis._box2dData.deletes = [];\r\n\t\t\t\t\r\n\t\t\t\tfor (let i in targets) {\r\n\t\t\t\t\tconst b2d = targets[i];\r\n\t\t\t\t\t\r\n\t\t\t\t\tconst position = b2d.body.GetPosition();\r\n\t\t\t\t\t\r\n\t\t\t\t\tb2d.x = position.x * Box2dToPixi;\r\n\t\t\t\t\tb2d.y = position.y * Box2dToPixi;\r\n\t\t\t\t\tb2d.rotation = b2d.body.GetAngle();\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tget speed() {\r\n\t\t\t\treturn this._box2dData.speed;\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tset speed(speed: number) {\r\n\t\t\t\tthis._box2dData.speed = speed;\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tget box2dEnabled() {\r\n\t\t\t\treturn this._box2dData.enabled;\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tset box2dEnabled(flag: boolean) {\r\n\t\t\t\tthis._box2dData.enabled = flag;\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tget world() {\r\n\t\t\t\treturn this._box2dData.world;\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\taddBox2d(b2d: Box2dObject) {\r\n\t\t\t\tif (!b2d.body) {\r\n\t\t\t\t\tconst body = this._box2dData.world.CreateBody(b2d.getBodyDef());\r\n\t\t\t\t\tconst fixtureDefs = b2d.getFixtureDefs();\r\n\t\t\t\t\t\r\n\t\t\t\t\tfor (let i = 0; i < fixtureDefs.length; i++) {\r\n\t\t\t\t\t\tbody.CreateFixture(fixtureDefs[i]);\r\n\t\t\t\t\t}\r\n\t\t\t\t\t\r\n\t\t\t\t\tb2d.body = body;\r\n\t\t\t\t\t\r\n\t\t\t\t\tbody.SetPosition({ x: b2d.x * PixiToBox2d, y: b2d.y * PixiToBox2d });\r\n\t\t\t\t\tbody.SetAngle(b2d.rotation);\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\t/*\r\n\t\t\t\tb2d.once('added', () => {\r\n\t\t\t\t\tthis._box2dData.targets[b2d.box2dID] = b2d;\r\n\t\t\t\t\t\r\n\t\t\t\t\tb2d.once('removed', () => {\r\n\t\t\t\t\t\tdelete(this._box2dData.targets[id]);\r\n\t\t\t\t\t\tthis._box2dData.world.DestroyBody(b2d.body);\r\n\t\t\t\t\t\tb2d.body = null;\r\n\t\t\t\t\t});\r\n\t\t\t\t});\r\n\t\t\t\t*/\r\n\t\t\t\t\r\n\t\t\t\tthis.addChild(b2d);\r\n\t\t\t\tthis._box2dData.targets[b2d.box2dID] = b2d;\r\n\t\t\t\tdelete(this._box2dData.deletes[b2d.box2dID]);\r\n\t\t\t\t\r\n\t\t\t\treturn b2d;\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tremoveBox2d(b2d: Box2dObject) {\r\n\t\t\t\tthis.removeChild(b2d);\r\n\t\t\t\tthis._box2dData.deletes[b2d.box2dID] = b2d;\r\n\t\t\t\t\r\n\t\t\t\treturn b2d;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n}\r\n\r\n/**\r\n * @ignore\r\n */\r\nexport import World = Pixim.box2d.World;","import * as _PIXI from 'pixi.js';\r\nimport * as _Pixim from '@tawaship/pixim.js';\r\nimport { BodyDef, FixtureDef, Body } from './Box2dAlias';\r\nimport { Box2dToPixi, PixiToBox2d } from './Conf';\r\nimport { events } from './events';\r\n\r\nnamespace Pixim {\r\n\texport namespace box2d {\r\n\t\texport interface IBox2dObjectOption {\r\n\t\t\tdensity?: number,\r\n\t\t\tfriction?: number,\r\n\t\t\trestitution?: number,\r\n\t\t\t\r\n\t\t\t/**\r\n\t\t\t * The logical sum of the bits representing the collision detection category to which it belongs.\r\n\t\t\t */\r\n\t\t\tcategoryBits?: number,\r\n\t\t\t\r\n\t\t\t/**\r\n\t\t\t * The logical sum of the \"categoryBits\" for which collision detection with itself is performed.\r\n\t\t\t */\r\n\t\t\tmaskBits?: number,\r\n\t\t\t\r\n\t\t\t/**\r\n\t\t\t * Whether it is a sensor that judges only the overlap of coordinates.\r\n\t\t\t */\r\n\t\t\tisSensor?: boolean\r\n\t\t};\r\n\t\t\r\n\t\t/**\r\n\t\t * @private\r\n\t\t */\r\n\t\ttype TBox2dObjectBody = Body | null;\r\n\t\t\r\n\t\texport interface IBox2dObjectData {\r\n\t\t\tid: number,\r\n\t\t\tbody: TBox2dObjectBody,\r\n\t\t\tbodyDef: BodyDef,\r\n\t\t\tfixtureDefs: FixtureDef[]\r\n\t\t};\r\n\t\t\r\n\t\t/**\r\n\t\t * @ignore\r\n\t\t */\r\n\t\tfunction createBodyDef(isDynamic: boolean = false) {\r\n\t\t\tconst bodyDef = new BodyDef();\r\n\t\t\tisDynamic ? bodyDef.type = Body.b2_dynamicBody : Body.b2_staticBody;\r\n\t\t\t\r\n\t\t\treturn bodyDef;\r\n\t\t}\r\n\t\t\r\n\t\t/**\r\n\t\t * @ignore\r\n\t\t */\r\n\t\tconst dynamicBodyDef: BodyDef = createBodyDef(true);\r\n\t\t\r\n\t\t/**\r\n\t\t * @ignore\r\n\t\t */\r\n\t\tconst staticBodyDef: BodyDef = createBodyDef(false);\r\n\t\t\r\n\t\t/**\r\n\t\t * @ignore\r\n\t\t */\r\n\t\tfunction createFixtureDef(options: IBox2dObjectOption = {}, pixi: _PIXI.Container) {\r\n\t\t\tconst fixtureDef = new FixtureDef();\r\n\t\t\t\r\n\t\t\tfixtureDef.density = typeof(options.density) === 'number' ? options.density : fixtureDef.density;\r\n\t\t\tfixtureDef.friction = typeof(options.friction) === 'number' ? options.friction : fixtureDef.friction;\r\n\t\t\tfixtureDef.restitution = typeof(options.restitution) === 'number' ? options.restitution : fixtureDef.restitution;\r\n\t\t\tfixtureDef.filter.categoryBits = typeof(options.categoryBits) === 'number' ? options.categoryBits : fixtureDef.filter.categoryBits;\r\n\t\t\tfixtureDef.filter.maskBits = typeof(options.maskBits) === 'number' ? options.maskBits : fixtureDef.filter.maskBits;\r\n\t\t\tfixtureDef.isSensor = !!options.isSensor;\r\n\t\t\tfixtureDef.userData = pixi;\r\n\t\t\t\r\n\t\t\treturn fixtureDef;\r\n\t\t}\r\n\t\t\r\n\t\t/**\r\n\t\t * @ignore\r\n\t\t */\r\n\t\tconst descriptors = {\r\n\t\t\tpositionX: Object.getOwnPropertyDescriptor(_PIXI.ObservablePoint.prototype, 'x'),\r\n\t\t\tpositionY: Object.getOwnPropertyDescriptor(_PIXI.ObservablePoint.prototype, 'y'),\r\n\t\t\tpositionSet: _PIXI.ObservablePoint.prototype.set,\r\n\t\t\trotation: Object.getOwnPropertyDescriptor(_PIXI.DisplayObject.prototype, 'rotation')\r\n\t\t};\r\n\t\t\r\n\t\texport type TContactDelegate = (opponent: Box2dObject) => void;\r\n\t\t\r\n\t\texport interface IBox2dObjectContact {\r\n\t\t\ton(event: typeof events.BeginContact, listener: TContactDelegate): this;\r\n\t\t\ton(event: typeof events.EndContact, listener: TContactDelegate): void;\r\n\t\t\ton(event: typeof events.PreSolve, listener: TContactDelegate): void;\r\n\t\t\ton(event: typeof events.PostSolve, listener: TContactDelegate): void;\r\n\t\t}\r\n\t\t\r\n\t\t/**\r\n\t\t * @see http://pixijs.download/release/docs/PIXI.Container.html\r\n\t\t */\r\n\t\texport class Box2dObject extends _PIXI.Container implements IBox2dObjectContact {\r\n\t\t\tprotected _box2dData: IBox2dObjectData;\r\n\t\t\tprivate static _id: number = 0;\r\n\t\t\t\r\n\t\t\tconstructor(isStatic: boolean = false, options: IBox2dObjectOption = {}) {\r\n\t\t\t\tsuper();\r\n\t\t\t\t\r\n\t\t\t\tthis._box2dData = {\r\n\t\t\t\t\tid: Box2dObject._id++,\r\n\t\t\t\t\tbody: null,\r\n\t\t\t\t\tbodyDef: isStatic ? staticBodyDef : dynamicBodyDef,\r\n\t\t\t\t\tfixtureDefs: [createFixtureDef(options, this)]\r\n\t\t\t\t};\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tgetBodyDef() {\r\n\t\t\t\treturn this._box2dData.bodyDef;\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tgetFixtureDefs() {\r\n\t\t\t\treturn this._box2dData.fixtureDefs;\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tget box2dID() {\r\n\t\t\t\treturn this._box2dData.id;\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tget body() {\r\n\t\t\t\treturn this._box2dData.body;\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tset body(body: TBox2dObjectBody) {\r\n\t\t\t\tthis._box2dData.body = body;\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tget x() {\r\n\t\t\t\treturn descriptors.positionX.get.call(this.position);\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tset x(x: number) {\r\n\t\t\t\tdescriptors.positionX.set.call(this.position, x);\r\n\t\t\t\t\r\n\t\t\t\tconst body = this._box2dData.body;\r\n\t\t\t\tif (!body) {\r\n\t\t\t\t\treturn;\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\tconst p = body.GetPosition();\r\n\t\t\t\tp.x = x * PixiToBox2d;\r\n\t\t\t\tbody.SetPosition(p);\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tget y() {\r\n\t\t\t\treturn descriptors.positionY.get.call(this.position);\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tset y(y: number) {\r\n\t\t\t\tdescriptors.positionY.set.call(this.position, y);\r\n\t\t\t\t\r\n\t\t\t\tconst body = this._box2dData.body;\r\n\t\t\t\tif (!body) {\r\n\t\t\t\t\treturn;\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\tconst p = body.GetPosition();\r\n\t\t\t\tp.y = y * PixiToBox2d;\r\n\t\t\t\tbody.SetPosition(p);\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tget rotation() {\r\n\t\t\t\treturn descriptors.rotation.get.call(this);\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tset rotation(rotation: number) {\r\n\t\t\t\tdescriptors.rotation.set.call(this, rotation);\r\n\t\t\t\t\r\n\t\t\t\tconst body = this._box2dData.body;\r\n\t\t\t\tif (!body) {\r\n\t\t\t\t\treturn;\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\tbody.SetAngle(rotation);\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\t/**\r\n\t\t\t * Adds the object with the specified \"category Bits\" to collision detection.\r\n\t\t\t */\r\n\t\t\taddMask(bits: number) {\r\n\t\t\t\tlet list = this._box2dData.body.GetFixtureList();\r\n\t\t\t\t\r\n\t\t\t\twhile (list) {\r\n\t\t\t\t\tconst data = list.GetFilterData();\r\n\t\t\t\t\tdata.maskBits |= bits;\r\n\t\t\t\t\tlist.SetFilterData(data);\r\n\t\t\t\t\t\r\n\t\t\t\t\tlist = list.GetNext();\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\t/**\r\n\t\t\t * Set to perform collision detection with all objects.\r\n\t\t\t */\r\n\t\t\taddAllMask() {\r\n\t\t\t\tlet list = this._box2dData.body.GetFixtureList();\r\n\t\t\t\t\r\n\t\t\t\twhile (list) {\r\n\t\t\t\t\tconst data = list.GetFilterData();\r\n\t\t\t\t\tdata.maskBits = 65535;\r\n\t\t\t\t\tlist.SetFilterData(data);\r\n\t\t\t\t\t\r\n\t\t\t\t\tlist = list.GetNext();\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\t/**\r\n\t\t\t * Removes the object with the specified \"category bit\" from collision detection.\r\n\t\t\t */\r\n\t\t\tremoveMask(bits: number) {\r\n\t\t\t\tlet list = this._box2dData.body.GetFixtureList();\r\n\t\t\t\t\r\n\t\t\t\twhile (list) {\r\n\t\t\t\t\tconst data = list.GetFilterData();\r\n\t\t\t\t\tdata.maskBits ^= data.maskBits & bits;\r\n\t\t\t\t\tlist.SetFilterData(data);\r\n\t\t\t\t\t\r\n\t\t\t\t\tlist = list.GetNext();\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\t/**\r\n\t\t\t * Set not to perform collision detection with any object.\r\n\t\t\t */\r\n\t\t\tremoveAllMask() {\r\n\t\t\t\tlet list = this._box2dData.body.GetFixtureList();\r\n\t\t\t\t\r\n\t\t\t\twhile (list) {\r\n\t\t\t\t\tconst data = list.GetFilterData();\r\n\t\t\t\t\tdata.maskBits = 0;\r\n\t\t\t\t\tlist.SetFilterData(data);\r\n\t\t\t\t\t\r\n\t\t\t\t\tlist = list.GetNext();\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n}\r\n\r\n/**\r\n * @ignore\r\n */\r\nexport import Box2dObject = Pixim.box2d.Box2dObject;\r\n\r\n/**\r\n * @ignore\r\n */\r\nexport import IBox2dObjectOption = Pixim.box2d.IBox2dObjectOption;\r\n\r\n/**\r\n * @ignore\r\n */\r\nexport import IBox2dObjectData = Pixim.box2d.IBox2dObjectData;","import * as _PIXI from 'pixi.js';\r\nimport { CircleShape } from './Box2dAlias';\r\nimport { World } from './World';\r\nimport { Box2dObject, IBox2dObjectData, IBox2dObjectOption } from './Box2dObject';\r\nimport * as Conf from './Conf';\r\n\r\nnamespace Pixim {\r\n\texport namespace box2d {\r\n\t\texport interface ICircleData extends IBox2dObjectData {\r\n\t\t\tradius: number\r\n\t\t};\r\n\t\t\r\n\t\texport class Circle extends Box2dObject {\r\n\t\t\tprotected _box2dData: ICircleData;\r\n\t\t\t\r\n\t\t\tconstructor(radius: number, isStatic: boolean, pixi: _PIXI.Container, options: IBox2dObjectOption = {}) {\r\n\t\t\t\tsuper(isStatic, options);\r\n\t\t\t\t\r\n\t\t\t\tthis._box2dData.radius = radius;\r\n\t\t\t\t\r\n\t\t\t\tconst fixtureDef = this.getFixtureDefs()[0];\r\n\t\t\t\t\r\n\t\t\t\tfixtureDef.shape = new CircleShape(radius * Conf.PixiToBox2d);\r\n\t\t\t\tthis.addChild(pixi);\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tget radius() {\r\n\t\t\t\treturn this._box2dData.radius;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n}\r\n\r\n/**\r\n * @ignore\r\n */\r\nexport import Circle = Pixim.box2d.Circle;","import * as _PIXI from 'pixi.js';\r\nimport { Vec2, PolygonShape } from './Box2dAlias';\r\nimport { World } from './World';\r\nimport { Box2dObject, IBox2dObjectData, IBox2dObjectOption } from './Box2dObject';\r\nimport * as Conf from './Conf';\r\n\r\nnamespace Pixim {\r\n\texport namespace box2d {\r\n\t\texport interface IRectangleData extends IBox2dObjectData {\r\n\t\t\twidth: number,\r\n\t\t\theight: number\r\n\t\t};\r\n\t\t\r\n\t\texport class Rectangle extends Box2dObject {\r\n\t\t\tprotected _box2dData: IRectangleData;\r\n\t\t\t\r\n\t\t\tconstructor(width: number, height: number, isStatic: boolean, pixi: _PIXI.Container, options: IBox2dObjectOption = {}) {\r\n\t\t\t\tsuper(isStatic, options);\r\n\t\t\t\t\r\n\t\t\t\tthis._box2dData.width = width;\r\n\t\t\t\tthis._box2dData.height = height;\r\n\t\t\t\t\r\n\t\t\t\twidth *= Conf.PixiToBox2d;\r\n\t\t\t\theight *= Conf.PixiToBox2d;\r\n\t\t\t\t\r\n\t\t\t\tconst fixtureDef = this.getFixtureDefs()[0];\r\n\t\t\t\tfixtureDef.shape = new PolygonShape();\r\n\t\t\t\tfixtureDef.shape.SetAsArray([\r\n\t\t\t\t\tnew Vec2(0, 0),\r\n\t\t\t\t\tnew Vec2(width, 0),\r\n\t\t\t\t\tnew Vec2(width, height),\r\n\t\t\t\t\tnew Vec2(0, height)\r\n\t\t\t\t]);\r\n\t\t\t\t\r\n\t\t\t\tthis.addChild(pixi);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n}\r\n\r\n/**\r\n * @ignore\r\n */\r\nexport import Rectangle = Pixim.box2d.Rectangle;","import { IInitOption, initOption } from './Conf';\r\nimport { Application } from 'pixi.js';\r\nimport { World } from './World';\r\nimport { DebugDraw } from './Box2dAlias';\r\nimport { Box2dToPixi } from './Conf';\r\n\r\n/**\r\n * @ignore\r\n */\r\nlet _isInit = false;\r\n\r\nnamespace Pixim {\r\n\texport namespace box2d {\r\n\t\t/**\r\n\t\t * @return Returns itself for the method chaining.\r\n\t\t */\r\n\t\texport function init(options: IInitOption = {}) {\r\n\t\t\tif (_isInit) {\r\n\t\t\t\tconsole.warn('[Pixim-box2d] Already initialized.');\r\n\t\t\t\treturn Pixim.box2d;\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tif (!options.ticker) {\r\n\t\t\t\tconsole.warn('[Pixim-box2d] It may not work because no default ticker is specified.');\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tinitOption.ticker = options.ticker;\r\n\t\t\t\r\n\t\t\t_isInit = true;\r\n\t\t\t\r\n\t\t\treturn Pixim.box2d;\r\n\t\t}\r\n\t\t\r\n\t\t/**\r\n\t\t * @param world Instance you want to debug\r\n\t\t * @param canvas The canvas element on which the content is drawn.\r\n\t\t * @return Canvas element for debug display.\r\n\t\t */\r\n\t\texport function addDebugDraw(world: World, pixiCanvas: HTMLCanvasElement): HTMLCanvasElement {\r\n\t\t\tconst canvas = document.body.appendChild(document.createElement('canvas'));\r\n\t\t\tcanvas.width = pixiCanvas.width;\r\n\t\t\tcanvas.height = pixiCanvas.height;\r\n\t\t\tcanvas.style.width = pixiCanvas.style.width;\r\n\t\t\tcanvas.style.height = pixiCanvas.style.height;\r\n\t\t\tcanvas.style.top = pixiCanvas.style.top;\r\n\t\t\tcanvas.style.left = pixiCanvas.style.left;\r\n\t\t\tcanvas.style.position = 'absolute';\r\n\t\t\tcanvas.style.pointerEvents = 'none';\r\n\t\t\tcanvas.style.zIndex = '100';\r\n\t\t\t\r\n\t\t\tconst debugDraw = new DebugDraw();\r\n\t\t\tdebugDraw.SetSprite(canvas.getContext('2d'));\r\n\t\t\tdebugDraw.SetDrawScale(Box2dToPixi);\r\n\t\t\tdebugDraw.SetFillAlpha(0.5);\r\n\t\t\tdebugDraw.SetLineThickness(1);\r\n\t\t\tdebugDraw.SetFlags(DebugDraw.e_shapeBit | DebugDraw.e_jointBit);\r\n\t\t\t\r\n\t\t\tworld.world.SetDebugDraw(debugDraw);\r\n\t\t\t\r\n\t\t\treturn canvas;\r\n\t\t}\r\n\t}\r\n}\r\n\r\n/**\r\n * @ignore\r\n */\r\nexport { IInitOption };\r\n\r\n/**\r\n * @ignore\r\n */\r\nexport import init = Pixim.box2d.init;\r\n\r\n/**\r\n * @ignore\r\n */\r\nexport import addDebugDraw = Pixim.box2d.addDebugDraw;","namespace Pixim {\r\n\texport namespace box2d {\r\n\t\texport namespace events {\r\n\t\t\t/**\r\n\t\t\t * When objects come into contact with each other.\r\n\t\t\t * \r\n\t\t\t * @event\r\n\t\t\t */\r\n\t\t\texport const BeginContact = 'BeginContact';\r\n\t\t\t\r\n\t\t\t/**\r\n\t\t\t * When objects are separated from each other.\r\n\t\t\t * \r\n\t\t\t * @event\r\n\t\t\t */\r\n\t\t\texport const EndContact = 'EndContact';\r\n\t\t\t\r\n\t\t\t/**\r\n\t\t\t * Immediately before performing contact processing between objects.\r\n\t\t\t * It will not fire if at least one is \"isSensor = true\".\r\n\t\t\t * \r\n\t\t\t * @event\r\n\t\t\t */\r\n\t\t\texport const PreSolve = 'PreSolve';\r\n\t\t\t\r\n\t\t\t/**\r\n\t\t\t * Immediately after performing contact processing between objects.\r\n\t\t\t * It will not fire if at least one is \"isSensor = true\".\r\n\t\t\t * \r\n\t\t\t * @event\r\n\t\t\t */\r\n\t\t\texport const PostSolve = 'PostSolve';\r\n\t\t}\r\n\t}\r\n}\r\n\r\n/**\r\n * @ignore\r\n */\r\nexport import events = Pixim.box2d.events;"],"names":["Pixim","Vec2","Common","Math","b2Vec2","DebugDraw","Dynamics","b2DebugDraw","World","b2World","ContactListener","Contacts","box2dContact","b2ContactListener","BodyDef","b2BodyDef","FixtureDef","b2FixtureDef","Body","b2Body","CircleShape","Collision","Shapes","b2CircleShape","PolygonShape","b2PolygonShape","const","PixiToBox2d","initOption","ticker","box2d","beginContactHandler","contact","dataA","GetFixtureA","GetUserData","dataB","GetFixtureB","emit","endContactHandler","preSolveHandler","postSolveHandler","options","super","gravityX","gravityY","allowSleep","world","_World","this","_box2dData","listener","enabled","speed","targets","deletes","on","add","_handleTick","remove","listenBeginContact","BeginContact","listenEndContact","EndContact","listenPreSolve","PreSolve","listenPostSolve","PostSolve","SetContactListener","box2dEnabled","delta","Step","ClearForces","DrawDebugData","let","i","b2d","DestroyBody","body","position","GetPosition","x","y","rotation","GetAngle","prototypeAccessors","flag","addBox2d","CreateBody","getBodyDef","fixtureDefs","getFixtureDefs","length","CreateFixture","SetPosition","SetAngle","addChild","box2dID","removeBox2d","removeChild","_Pixim.Container","createBodyDef","isDynamic","bodyDef","type","b2_dynamicBody","b2_staticBody","dynamicBodyDef","staticBodyDef","createFixtureDef","pixi","fixtureDef","density","friction","restitution","filter","categoryBits","maskBits","isSensor","userData","descriptors","positionX","Object","getOwnPropertyDescriptor","_PIXI.ObservablePoint","prototype","positionY","positionSet","set","_PIXI.DisplayObject","Box2dObject","isStatic","id","_id","get","call","p","addMask","bits","list","GetFixtureList","data","GetFilterData","SetFilterData","GetNext","addAllMask","removeMask","removeAllMask","_PIXI.Container","Circle","radius","shape","Conf.PixiToBox2d","Rectangle","width","height","SetAsArray","_isInit","console","warn","pixiCanvas","canvas","document","appendChild","createElement","style","top","left","pointerEvents","zIndex","debugDraw","SetSprite","getContext","SetDrawScale","SetFillAlpha","SetLineThickness","SetFlags","e_shapeBit","e_jointBit","SetDebugDraw","init","addDebugDraw","events"],"mappings":"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"}