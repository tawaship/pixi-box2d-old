{"version":3,"file":"pixi-box2d.js","sources":["../src/ContainerBase.ts","../src/Box2dAlias.ts","../src/WorldContainer.ts","../src/Conf.ts","../src/Box2dObject.ts","../src/Circle.ts","../src/Rectangle.ts","../src/Polygon.ts","../src/Edge.ts","../src/core.ts"],"sourcesContent":["import { Container as PixiContainer } from 'pixi.js';\r\n\r\nnamespace PIXI {\r\n\texport namespace box2d {\r\n\t\t/**\r\n\t\t * @see http://pixijs.download/release/docs/PIXI.Container.html\r\n\t\t */\r\n\t\texport class ContainerBase extends PixiContainer {}\r\n\t}\r\n}\r\n\r\n/**\r\n * @ignore\r\n */\r\nexport import ContainerBase = PIXI.box2d.ContainerBase;","import { Dynamics, Collision, Common } from 'box2dweb';\r\n\r\n/**\r\n * @ignore\r\n */\r\nexport import Vec2 = Common.Math.b2Vec2;\r\n\r\n/**\r\n * @ignore\r\n */\r\nexport import DebugDraw = Dynamics.b2DebugDraw;\r\n\r\n/**\r\n * @ignore\r\n */\r\nexport import World = Dynamics.b2World;\r\n\r\n/**\r\n * @ignore\r\n */\r\nexport import Contact = Dynamics.Contacts.box2dContact;\r\n\r\n/**\r\n * @ignore\r\n */\r\nexport import ContactListener = Dynamics.b2ContactListener;\r\n\r\n/**\r\n * @ignore\r\n */\r\nexport import BodyDef = Dynamics.b2BodyDef;\r\n\r\n/**\r\n * @ignore\r\n */\r\nexport import FixtureDef = Dynamics.b2FixtureDef;\r\n\r\n/**\r\n * @ignore\r\n */\r\nexport import Body = Dynamics.b2Body;\r\n\r\n/**\r\n * @ignore\r\n */\r\nexport import CircleShape = Collision.Shapes.b2CircleShape;\r\n\r\n/**\r\n * @ignore\r\n */\r\nexport import PolygonShape = Collision.Shapes.b2PolygonShape;\r\n\r\n/**\r\n * @ignore\r\n */\r\nexport import EdgeShape = Collision.Shapes.b2EdgeShape;","import { Application, Ticker } from 'pixi.js';\r\nimport { Vec2, World, Contact, ContactListener } from './Box2dAlias';\r\nimport { Box2dObject } from './Box2dObject';\r\nimport { ContainerBase } from './ContainerBase';\r\nimport { initializeOption, Box2dToPixi, PixiToBox2d } from './Conf';\r\n\r\nnamespace PIXI {\r\n\texport namespace box2d {\r\n\t\texport interface IWorldContainerData {\r\n\t\t\tworld: World,\r\n\t\t\tlistener: ContactListener,\r\n\t\t\tenabled: boolean,\r\n\t\t\tspeed: number,\r\n\t\t\ttargets: { [id: number]: Box2dObject },\r\n\t\t\tdeletes: { [id: number]: Box2dObject },\r\n\t\t\tticker?: Ticker\r\n\t\t};\r\n\t\t\r\n\t\texport interface IWorldContainerOption {\r\n\t\t\tgravityX?: number,\r\n\t\t\tgravityY?: number,\r\n\t\t\tallowSleep?: boolean,\r\n\t\t\tlistenBeginContact?: boolean,\r\n\t\t\tlistenEndContact?: boolean,\r\n\t\t\tlistenPreSolve?: boolean,\r\n\t\t\tlistenPostSolve?: boolean,\r\n\t\t\tticker?: Ticker\r\n\t\t};\r\n\t\t\r\n\t\t/**\r\n\t\t * @ignore\r\n\t\t */\r\n\t\tfunction beginContactHandler(contact: Contact) {\r\n\t\t\tconst dataA = contact.GetFixtureA().GetUserData();\r\n\t\t\tconst dataB = contact.GetFixtureB().GetUserData();\r\n\t\t\t\r\n\t\t\tdataA && dataA.emit && dataA.emit('BeginContact', dataB);\r\n\t\t\tdataB && dataB.emit && dataB.emit('BeginContact', dataA);\r\n\t\t}\r\n\t\t\r\n\t\t/**\r\n\t\t * @ignore\r\n\t\t */\r\n\t\tfunction endContactHandler(contact: Contact) {\r\n\t\t\tconst dataA = contact.GetFixtureA().GetUserData();\r\n\t\t\tconst dataB = contact.GetFixtureB().GetUserData();\r\n\t\t\t\r\n\t\t\tdataA && dataA.emit && dataA.emit('EndContact', dataB);\r\n\t\t\tdataB && dataB.emit && dataB.emit('EndContact', dataA);\r\n\t\t}\r\n\t\t\r\n\t\t/**\r\n\t\t * @ignore\r\n\t\t */\r\n\t\tfunction preSolveHandler(contact: Contact) {\r\n\t\t\tconst dataA = contact.GetFixtureA().GetUserData();\r\n\t\t\tconst dataB = contact.GetFixtureB().GetUserData();\r\n\t\t\t\r\n\t\t\tdataA && dataA.emit && dataA.emit('PreSolve', dataB);\r\n\t\t\tdataB && dataB.emit && dataB.emit('PreSolve', dataA);\r\n\t\t}\r\n\t\t\r\n\t\t/**\r\n\t\t * @ignore\r\n\t\t */\r\n\t\tfunction postSolveHandler(contact: Contact) {\r\n\t\t\tconst dataA = contact.GetFixtureA().GetUserData();\r\n\t\t\tconst dataB = contact.GetFixtureB().GetUserData();\r\n\t\t\t\r\n\t\t\tdataA && dataA.emit && dataA.emit('PostSolve', dataB);\r\n\t\t\tdataB && dataB.emit && dataB.emit('PostSolve', dataA);\r\n\t\t}\r\n\t\t\r\n\t\texport class WorldContainer extends ContainerBase {\r\n\t\t\tprivate _box2dData: IWorldContainerData;\r\n\t\t\t\r\n\t\t\tconstructor(options: IWorldContainerOption = {}) {\r\n\t\t\t\tsuper();\r\n\t\t\t\t\r\n\t\t\t\tconst gravityX = typeof(options.gravityX) === 'number' ? options.gravityX : 0;\r\n\t\t\t\tconst gravityY = typeof(options.gravityY) === 'number' ? options.gravityY : 9.8;\r\n\t\t\t\tconst allowSleep = !!options.allowSleep;\r\n\t\t\t\t\r\n\t\t\t\tconst world = new World(new Vec2(gravityX, gravityY), allowSleep);\r\n\t\t\t\t\r\n\t\t\t\tthis._box2dData = {\r\n\t\t\t\t\tworld,\r\n\t\t\t\t\tlistener: new ContactListener(),\r\n\t\t\t\t\tenabled: true,\r\n\t\t\t\t\tspeed: 1,\r\n\t\t\t\t\ttargets: {},\r\n\t\t\t\t\tdeletes: {},\r\n\t\t\t\t\tticker: options.ticker\r\n\t\t\t\t};\r\n\t\t\t\t\r\n\t\t\t\tthis.on('added', () => {\r\n\t\t\t\t\tthis._box2dData.ticker = this._box2dData.ticker || initializeOption.ticker;\r\n\t\t\t\t\tthis._box2dData.ticker.add(this._handleTick, this);\r\n\t\t\t\t});\r\n\t\t\t\t\r\n\t\t\t\tthis.on('removed', () => {\r\n\t\t\t\t\tthis._box2dData.ticker.remove(this._handleTick, this);\r\n\t\t\t\t});\r\n\t\t\t\t\r\n\t\t\t\tconst listener = this._box2dData.listener;\r\n\t\t\t\tif (options.listenBeginContact) {\r\n\t\t\t\t\tlistener.BeginContact = beginContactHandler;\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\tif (options.listenEndContact) {\r\n\t\t\t\t\tlistener.EndContact = endContactHandler;\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\tif (options.listenPreSolve) {\r\n\t\t\t\t\tlistener.PreSolve = preSolveHandler;\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\tif (options.listenPostSolve) {\r\n\t\t\t\t\tlistener.PostSolve = postSolveHandler;\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\tworld.SetContactListener(listener);\r\n\t\t\t\t\r\n\t\t\t\tthis.box2dEnabled = true\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tprivate _handleTick(delta: number) {\r\n\t\t\t\tif (!this._box2dData.enabled) {\r\n\t\t\t\t\treturn;\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\tconst world = this._box2dData.world;\r\n\t\t\t\t\r\n\t\t\t\tworld.Step(delta * this._box2dData.speed / 30, 10, 10);\r\n\t\t\t\tworld.ClearForces();\r\n\t\t\t\tworld.DrawDebugData();\r\n\t\t\t\t\r\n\t\t\t\tconst targets = this._box2dData.targets;\r\n\t\t\t\t\r\n\t\t\t\tfor (let i in this._box2dData.deletes) {\r\n\t\t\t\t\tconst b2d = this._box2dData.deletes[i];\r\n\t\t\t\t\tdelete(targets[i]);\r\n\t\t\t\t\tworld.DestroyBody(b2d.body);\r\n\t\t\t\t\tb2d.body = null;\r\n\t\t\t\t}\r\n\t\t\t\tthis._box2dData.deletes = [];\r\n\t\t\t\t\r\n\t\t\t\tfor (let i in targets) {\r\n\t\t\t\t\tconst b2d = targets[i];\r\n\t\t\t\t\t\r\n\t\t\t\t\tconst position = b2d.body.GetPosition();\r\n\t\t\t\t\t\r\n\t\t\t\t\tb2d.x = position.x * Box2dToPixi;\r\n\t\t\t\t\tb2d.y = position.y * Box2dToPixi;\r\n\t\t\t\t\tb2d.rotation = b2d.body.GetAngle();\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tget speed() {\r\n\t\t\t\treturn this._box2dData.speed;\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tset speed(speed: number) {\r\n\t\t\t\tthis._box2dData.speed = speed;\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tget box2dEnabled() {\r\n\t\t\t\treturn this._box2dData.enabled;\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tset box2dEnabled(flag: boolean) {\r\n\t\t\t\tthis._box2dData.enabled = flag;\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tget world(): World {\r\n\t\t\t\treturn this._box2dData.world;\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\taddBox2d(b2d: Box2dObject) {\r\n\t\t\t\tif (!b2d.body) {\r\n\t\t\t\t\tconst body = this._box2dData.world.CreateBody(b2d.getBodyDef());\r\n\t\t\t\t\tconst fixtureDefs = b2d.getFixtureDefs();\r\n\t\t\t\t\t\r\n\t\t\t\t\tfor (let i = 0; i < fixtureDefs.length; i++) {\r\n\t\t\t\t\t\tbody.CreateFixture(fixtureDefs[i]);\r\n\t\t\t\t\t}\r\n\t\t\t\t\t\r\n\t\t\t\t\tb2d.body = body;\r\n\t\t\t\t\t\r\n\t\t\t\t\tbody.SetPosition({ x: b2d.x * PixiToBox2d, y: b2d.y * PixiToBox2d });\r\n\t\t\t\t\tbody.SetAngle(b2d.rotation);\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\t/*\r\n\t\t\t\tb2d.once('added', () => {\r\n\t\t\t\t\tthis._box2dData.targets[b2d.box2dID] = b2d;\r\n\t\t\t\t\t\r\n\t\t\t\t\tb2d.once('removed', () => {\r\n\t\t\t\t\t\tdelete(this._box2dData.targets[id]);\r\n\t\t\t\t\t\tthis._box2dData.world.DestroyBody(b2d.body);\r\n\t\t\t\t\t\tb2d.body = null;\r\n\t\t\t\t\t});\r\n\t\t\t\t});\r\n\t\t\t\t*/\r\n\t\t\t\t\r\n\t\t\t\tthis.addChild(b2d);\r\n\t\t\t\tthis._box2dData.targets[b2d.box2dID] = b2d;\r\n\t\t\t\tdelete(this._box2dData.deletes[b2d.box2dID]);\r\n\t\t\t\t\r\n\t\t\t\treturn b2d;\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tremoveBox2d(b2d: Box2dObject) {\r\n\t\t\t\tthis.removeChild(b2d);\r\n\t\t\t\tthis._box2dData.deletes[b2d.box2dID] = b2d;\r\n\t\t\t\t\r\n\t\t\t\treturn b2d;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n}\r\n\r\n/**\r\n * @ignore\r\n */\r\nexport import WorldContainer = PIXI.box2d.WorldContainer;\r\n\r\n/**\r\n * @ignore\r\n */\r\nexport import IWorldContainerData = PIXI.box2d.IWorldContainerData;\r\n\r\n/**\r\n * @ignore\r\n */\r\nexport import IWorldContainerOption = PIXI.box2d.IWorldContainerOption;","import { Ticker } from 'pixi.js';\r\n\r\nnamespace PIXI {\r\n\texport namespace box2d {\r\n\t\texport interface IInitializeOption {\r\n\t\t\t/**\r\n\t\t\t * Ticker that synchronizes the processing of box2dweb.\r\n\t\t\t * \r\n\t\t\t * @see http://pixijs.download/v5.3.2/docs/PIXI.Ticker_.html\r\n\t\t\t */\r\n\t\t\tticker?: Ticker\r\n\t\t}\r\n\t}\r\n}\r\n\r\n/**\r\n * @ignore\r\n */\r\nexport const Box2dToPixi = 30;\r\n\r\n/**\r\n * @ignore\r\n */\r\nexport const PixiToBox2d = 1 / Box2dToPixi;\r\n\r\n/**\r\n * @ignore\r\n */\r\nexport import IInitializeOption = PIXI.box2d.IInitializeOption;\r\n\r\n/**\r\n * @ignore\r\n */\r\nexport const initializeOption: PIXI.box2d.IInitializeOption = {\r\n\tticker: null\r\n};","import { DisplayObject, Container, ObservablePoint } from 'pixi.js';\r\nimport { BodyDef, FixtureDef, Body } from './Box2dAlias';\r\nimport { Box2dToPixi, PixiToBox2d } from './Conf';\r\nimport { ContainerBase } from './ContainerBase';\r\n\r\nnamespace PIXI {\r\n\texport namespace box2d {\r\n\t\texport interface IBox2dObjectOption {\r\n\t\t\tdensity?: number,\r\n\t\t\tfriction?: number,\r\n\t\t\trestitution?: number,\r\n\t\t\tisStatic?: boolean\r\n\t\t\t\r\n\t\t\t/**\r\n\t\t\t * The logical sum of the bits representing the collision detection category to which it belongs.\r\n\t\t\t */\r\n\t\t\tcategoryBits?: number,\r\n\t\t\t\r\n\t\t\t/**\r\n\t\t\t * The logical sum of the \"categoryBits\" for which collision detection with itself is performed.\r\n\t\t\t */\r\n\t\t\tmaskBits?: number,\r\n\t\t\t\r\n\t\t\t/**\r\n\t\t\t * Whether it is a sensor that judges only the overlap of coordinates.\r\n\t\t\t */\r\n\t\t\tisSensor?: boolean\r\n\t\t};\r\n\t\t\r\n\t\t/**\r\n\t\t * @private\r\n\t\t */\r\n\t\ttype TBox2dObjectBody = Body | null;\r\n\t\t\r\n\t\texport interface IBox2dObjectData {\r\n\t\t\tid: number,\r\n\t\t\tbody: TBox2dObjectBody,\r\n\t\t\tbodyDef: BodyDef,\r\n\t\t\tfixtureDefs: FixtureDef[],\r\n\t\t\tpixi?: Container\r\n\t\t};\r\n\t\t\r\n\t\t/**\r\n\t\t * @ignore\r\n\t\t */\r\n\t\tfunction createBodyDef(isDynamic: boolean = false) {\r\n\t\t\tconst bodyDef = new BodyDef();\r\n\t\t\tisDynamic ? bodyDef.type = Body.b2_dynamicBody : Body.b2_staticBody;\r\n\t\t\t\r\n\t\t\treturn bodyDef;\r\n\t\t}\r\n\t\t\r\n\t\t/**\r\n\t\t * @ignore\r\n\t\t */\r\n\t\tconst dynamicBodyDef: BodyDef = createBodyDef(true);\r\n\t\t\r\n\t\t/**\r\n\t\t * @ignore\r\n\t\t */\r\n\t\tconst staticBodyDef: BodyDef = createBodyDef(false);\r\n\t\t\r\n\t\t/**\r\n\t\t * @ignore\r\n\t\t */\r\n\t\tfunction createFixtureDef(options: IBox2dObjectOption = {}, pixi: Container) {\r\n\t\t\tconst fixtureDef = new FixtureDef();\r\n\t\t\t\r\n\t\t\tfixtureDef.density = typeof(options.density) === 'number' ? options.density : fixtureDef.density;\r\n\t\t\tfixtureDef.friction = typeof(options.friction) === 'number' ? options.friction : fixtureDef.friction;\r\n\t\t\tfixtureDef.restitution = typeof(options.restitution) === 'number' ? options.restitution : fixtureDef.restitution;\r\n\t\t\tfixtureDef.filter.categoryBits = typeof(options.categoryBits) === 'number' ? options.categoryBits : fixtureDef.filter.categoryBits;\r\n\t\t\tfixtureDef.filter.maskBits = typeof(options.maskBits) === 'number' ? options.maskBits : fixtureDef.filter.maskBits;\r\n\t\t\tfixtureDef.isSensor = !!options.isSensor;\r\n\t\t\tfixtureDef.userData = pixi;\r\n\t\t\t\r\n\t\t\treturn fixtureDef;\r\n\t\t}\r\n\t\t\r\n\t\t/**\r\n\t\t * @ignore\r\n\t\t */\r\n\t\tconst descriptors = {\r\n\t\t\tpositionX: Object.getOwnPropertyDescriptor(ObservablePoint.prototype, 'x'),\r\n\t\t\tpositionY: Object.getOwnPropertyDescriptor(ObservablePoint.prototype, 'y'),\r\n\t\t\tpositionSet: ObservablePoint.prototype.set,\r\n\t\t\trotation: Object.getOwnPropertyDescriptor(DisplayObject.prototype, 'rotation')\r\n\t\t};\r\n\t\t\r\n\t\texport class Box2dObject extends ContainerBase {\r\n\t\t\tprotected _box2dData: IBox2dObjectData;\r\n\t\t\tprivate static _id: number = 0;\r\n\t\t\t\r\n\t\t\t/**\r\n\t\t\t * When objects come into contact with each other.\r\n\t\t\t * @event\r\n\t\t\t * @param opponent The object to collide with.\r\n\t\t\t */\r\n\t\t\tBeginContact(opponent: Box2dObject) {\r\n\t\t\t\tthis.emit('BeginContact', opponent);\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\t/**\r\n\t\t\t * When objects are separated from each other.\r\n\t\t\t * @event\r\n\t\t\t * @param opponent The object to collide with.\r\n\t\t\t */\r\n\t\t\tEndContact(opponent: Box2dObject) {\r\n\t\t\t\tthis.emit('EndContact', opponent);\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\t/**\r\n\t\t\t * Immediately before performing contact processing between objects.<br />\r\n\t\t\t * It will not fire if at least one is \"isSensor = true\".\r\n\t\t\t * @event\r\n\t\t\t * @param opponent The object to collide with.\r\n\t\t\t */\r\n\t\t\tPreSolve(opponent: Box2dObject) {\r\n\t\t\t\tthis.emit('PreSolve', opponent);\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\t/**\r\n\t\t\t * Immediately after performing contact processing between objects.<br />\r\n\t\t\t * It will not fire if at least one is \"isSensor = true\".\r\n\t\t\t * @event\r\n\t\t\t * @param opponent The object to collide with.\r\n\t\t\t */\r\n\t\t\tPostSolve(opponent: Box2dObject) {\r\n\t\t\t\tthis.emit('PostSolve', opponent);\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tconstructor(options: IBox2dObjectOption = {}) {\r\n\t\t\t\tsuper();\r\n\t\t\t\t\r\n\t\t\t\tthis._box2dData = {\r\n\t\t\t\t\tid: Box2dObject._id++,\r\n\t\t\t\t\tbody: null,\r\n\t\t\t\t\tbodyDef: options.isStatic ? staticBodyDef : dynamicBodyDef,\r\n\t\t\t\t\tfixtureDefs: [createFixtureDef(options, this)],\r\n\t\t\t\t\tpixi: null\r\n\t\t\t\t};\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tgetBodyDef() {\r\n\t\t\t\treturn this._box2dData.bodyDef;\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tgetFixtureDefs() {\r\n\t\t\t\treturn this._box2dData.fixtureDefs;\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tget box2dID() {\r\n\t\t\t\treturn this._box2dData.id;\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tget body(): TBox2dObjectBody {\r\n\t\t\t\treturn this._box2dData.body;\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tset body(body: TBox2dObjectBody) {\r\n\t\t\t\tthis._box2dData.body = body;\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tget x() {\r\n\t\t\t\treturn descriptors.positionX.get.call(this.position);\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tset x(x: number) {\r\n\t\t\t\tdescriptors.positionX.set.call(this.position, x);\r\n\t\t\t\t\r\n\t\t\t\tconst body = this._box2dData.body;\r\n\t\t\t\tif (!body) {\r\n\t\t\t\t\treturn;\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\tconst p = body.GetPosition();\r\n\t\t\t\tp.x = x * PixiToBox2d;\r\n\t\t\t\tbody.SetPosition(p);\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tget y() {\r\n\t\t\t\treturn descriptors.positionY.get.call(this.position);\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tset y(y: number) {\r\n\t\t\t\tdescriptors.positionY.set.call(this.position, y);\r\n\t\t\t\t\r\n\t\t\t\tconst body = this._box2dData.body;\r\n\t\t\t\tif (!body) {\r\n\t\t\t\t\treturn;\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\tconst p = body.GetPosition();\r\n\t\t\t\tp.y = y * PixiToBox2d;\r\n\t\t\t\tbody.SetPosition(p);\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tget rotation() {\r\n\t\t\t\treturn descriptors.rotation.get.call(this);\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tset rotation(rotation: number) {\r\n\t\t\t\tdescriptors.rotation.set.call(this, rotation);\r\n\t\t\t\t\r\n\t\t\t\tconst body = this._box2dData.body;\r\n\t\t\t\tif (!body) {\r\n\t\t\t\t\treturn;\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\tbody.SetAngle(rotation);\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\t/**\r\n\t\t\t * Adds the object with the specified \"category Bits\" to collision detection.\r\n\t\t\t */\r\n\t\t\taddMask(bits: number) {\r\n\t\t\t\tlet list = this._box2dData.body.GetFixtureList();\r\n\t\t\t\t\r\n\t\t\t\twhile (list) {\r\n\t\t\t\t\tconst data = list.GetFilterData();\r\n\t\t\t\t\tdata.maskBits |= bits;\r\n\t\t\t\t\tlist.SetFilterData(data);\r\n\t\t\t\t\t\r\n\t\t\t\t\tlist = list.GetNext();\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\t/**\r\n\t\t\t * Set to perform collision detection with all objects.\r\n\t\t\t */\r\n\t\t\taddAllMask() {\r\n\t\t\t\tlet list = this._box2dData.body.GetFixtureList();\r\n\t\t\t\t\r\n\t\t\t\twhile (list) {\r\n\t\t\t\t\tconst data = list.GetFilterData();\r\n\t\t\t\t\tdata.maskBits = 65535;\r\n\t\t\t\t\tlist.SetFilterData(data);\r\n\t\t\t\t\t\r\n\t\t\t\t\tlist = list.GetNext();\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\t/**\r\n\t\t\t * Removes the object with the specified \"category bit\" from collision detection.\r\n\t\t\t */\r\n\t\t\tremoveMask(bits: number) {\r\n\t\t\t\tlet list = this._box2dData.body.GetFixtureList();\r\n\t\t\t\t\r\n\t\t\t\twhile (list) {\r\n\t\t\t\t\tconst data = list.GetFilterData();\r\n\t\t\t\t\tdata.maskBits ^= data.maskBits & bits;\r\n\t\t\t\t\tlist.SetFilterData(data);\r\n\t\t\t\t\t\r\n\t\t\t\t\tlist = list.GetNext();\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\t/**\r\n\t\t\t * Set not to perform collision detection with any object.\r\n\t\t\t */\r\n\t\t\tremoveAllMask() {\r\n\t\t\t\tlet list = this._box2dData.body.GetFixtureList();\r\n\t\t\t\t\r\n\t\t\t\twhile (list) {\r\n\t\t\t\t\tconst data = list.GetFilterData();\r\n\t\t\t\t\tdata.maskBits = 0;\r\n\t\t\t\t\tlist.SetFilterData(data);\r\n\t\t\t\t\t\r\n\t\t\t\t\tlist = list.GetNext();\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\ttoDynamic() {\r\n\t\t\t\tif (!this._box2dData.body) {\r\n\t\t\t\t\treturn;\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\tthis._box2dData.body.SetType(Body.b2_dynamicBody);\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\ttoStatic() {\r\n\t\t\t\tif (!this._box2dData.body) {\r\n\t\t\t\t\treturn;\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\tthis._box2dData.body.SetType(Body.b2_staticBody);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n}\r\n\r\n/**\r\n * @ignore\r\n */\r\nexport import Box2dObject = PIXI.box2d.Box2dObject;\r\n\r\n/**\r\n * @ignore\r\n */\r\nexport import IBox2dObjectOption = PIXI.box2d.IBox2dObjectOption;\r\n\r\n/**\r\n * @ignore\r\n */\r\nexport import IBox2dObjectData = PIXI.box2d.IBox2dObjectData;","import { Container as PixiContainer } from 'pixi.js';\r\nimport { CircleShape } from './Box2dAlias';\r\nimport { Box2dObject, IBox2dObjectData, IBox2dObjectOption } from './Box2dObject';\r\nimport * as Conf from './Conf';\r\n\r\nnamespace PIXI {\r\n\texport namespace box2d {\r\n\t\t/*\r\n\t\texport interface ICircleData extends IBox2dObjectData {\r\n\t\t\tradius: number\r\n\t\t};\r\n\t\t*/\r\n\t\t\r\n\t\texport class Circle extends Box2dObject {\r\n\t\t\t//protected _box2dData: ICircleData;\r\n\t\t\t\r\n\t\t\tconstructor(radius: number, options: IBox2dObjectOption = {}) {\r\n\t\t\t\tsuper(options);\r\n\t\t\t\t\r\n\t\t\t\t//this._box2dData.radius = radius;\r\n\t\t\t\t\r\n\t\t\t\tconst fixtureDef = this.getFixtureDefs()[0];\r\n\t\t\t\tfixtureDef.shape = new CircleShape(radius * Conf.PixiToBox2d);\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\t/**\r\n\t\t\t * Create a \"Circle\" instance whose radius is the larger width or height of the \"PIXI.Container\" instance at that point.\r\n\t\t\t * Note that if you change the shape of the \"PIXI.Container\" instance after creating this method, the appearance and collision detection will not match.\r\n\t\t\t */\r\n\t\t\tstatic from(pixi: PixiContainer, options: IBox2dObjectOption = {}) {\r\n\t\t\t\tconst b2d = new Circle(Math.max(pixi.width / 2, pixi.height/ 2), options);\r\n\t\t\t\t\r\n\t\t\t\tconst c = b2d.addChild(new PixiContainer());\r\n\t\t\t\tc.addChild(pixi);\r\n\t\t\t\t\r\n\t\t\t\tconst b = b2d.getLocalBounds();\r\n\t\t\t\tc.x = -b.x - pixi.width / 2;\r\n\t\t\t\tc.y = -b.y - pixi.height / 2;\r\n\t\t\t\t\r\n\t\t\t\treturn b2d;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n}\r\n\r\n/**\r\n * @ignore\r\n */\r\nexport import Circle = PIXI.box2d.Circle;\r\n\r\n/**\r\n * @ignore\r\n */\r\n//export import ICircleData = PIXI.box2d.ICircleData;","import { Container as PixiContainer } from 'pixi.js';\r\nimport { Vec2, PolygonShape } from './Box2dAlias';\r\nimport { Box2dObject, IBox2dObjectData, IBox2dObjectOption } from './Box2dObject';\r\nimport * as Conf from './Conf';\r\n\r\nnamespace PIXI {\r\n\texport namespace box2d {\r\n\t\t/*\r\n\t\texport interface IRectangleData extends IBox2dObjectData {\r\n\t\t\twidth: number,\r\n\t\t\theight: number\r\n\t\t};\r\n\t\t*/\r\n\t\t\r\n\t\texport class Rectangle extends Box2dObject {\r\n\t\t\t//protected _box2dData: IRectangleData;\r\n\t\t\t\r\n\t\t\tconstructor(width: number, height: number, options: IBox2dObjectOption = {}) {\r\n\t\t\t\tsuper(options);\r\n\t\t\t\t\r\n\t\t\t\twidth *= Conf.PixiToBox2d;\r\n\t\t\t\theight *= Conf.PixiToBox2d;\r\n\t\t\t\t\r\n\t\t\t\tconst fixtureDef = this.getFixtureDefs()[0];\r\n\t\t\t\tfixtureDef.shape = new PolygonShape();\r\n\t\t\t\tfixtureDef.shape.SetAsArray([\r\n\t\t\t\t\tnew Vec2(0, 0),\r\n\t\t\t\t\tnew Vec2(width, 0),\r\n\t\t\t\t\tnew Vec2(width, height),\r\n\t\t\t\t\tnew Vec2(0, height)\r\n\t\t\t\t]);\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\t/**\r\n\t\t\t * Create a \"Rectangle\" instance that circumscribes the shape of the \"PIXI.Container\" instance at that point.\r\n\t\t\t * Note that if you change the shape of the \"PIXI.Container\" instance after creating this method, the appearance and collision detection will not match.\r\n\t\t\t */\r\n\t\t\tstatic from(pixi: PixiContainer, options: IBox2dObjectOption = {}) {\r\n\t\t\t\tconst b2d = new Rectangle(pixi.width, pixi.height, options);\r\n\t\t\t\t\r\n\t\t\t\tconst c = b2d.addChild(new PixiContainer());\r\n\t\t\t\tc.addChild(pixi);\r\n\t\t\t\t\r\n\t\t\t\tconst b = b2d.getLocalBounds();\r\n\t\t\t\tc.x = -b.x;\r\n\t\t\t\tc.y = -b.y;\r\n\t\t\t\t\r\n\t\t\t\treturn b2d;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n}\r\n\r\n/**\r\n * @ignore\r\n */\r\nexport import Rectangle = PIXI.box2d.Rectangle;\r\n\r\n/**\r\n * @ignore\r\n */\r\n//export import IRectangleData = PIXI.box2d.IRectangleData;","import { Vec2, PolygonShape } from './Box2dAlias';\r\nimport { Box2dObject, IBox2dObjectData, IBox2dObjectOption } from './Box2dObject';\r\nimport * as Conf from './Conf';\r\n\r\nnamespace PIXI {\r\n\texport namespace box2d {\r\n\t\t/*\r\n\t\texport interface IPolygonData extends IBox2dObjectData {\r\n\t\t\tvertices: Vec2[]\r\n\t\t};\r\n\t\t*/\r\n\t\t\r\n\t\texport class Polygon extends Box2dObject {\r\n\t\t\t//protected _box2dData: IPolygonData;\r\n\t\t\t\r\n\t\t\tconstructor(vertices: Vec2[], options: IBox2dObjectOption = {}) {\r\n\t\t\t\tsuper(options);\r\n\t\t\t\t\r\n\t\t\t\t//this._box2dData.vertices = vertices;\r\n\t\t\t\t\r\n\t\t\t\tconst fixtureDef = this.getFixtureDefs()[0];\r\n\t\t\t\tfixtureDef.shape = new PolygonShape();\r\n\t\t\t\tfixtureDef.shape.SetAsArray(vertices);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n}\r\n\r\n/**\r\n * @ignore\r\n */\r\nexport import Polygon = PIXI.box2d.Polygon;\r\n\r\n/**\r\n * @ignore\r\n */\r\n//export import IPolygonData = PIXI.box2d.IPolygonData;","import { Vec2, PolygonShape } from './Box2dAlias';\r\nimport { Box2dObject, IBox2dObjectData, IBox2dObjectOption } from './Box2dObject';\r\nimport * as Conf from './Conf';\r\n\r\nnamespace PIXI {\r\n\texport namespace box2d {\r\n\t\t/*\r\n\t\texport interface IEdgeData extends IBox2dObjectData {\r\n\t\t\tvertices: Vec2[]\r\n\t\t};\r\n\t\t*/\r\n\t\t\r\n\t\texport class Edge extends Box2dObject {\r\n\t\t\t//protected _box2dData: IEdgeData;\r\n\t\t\t\r\n\t\t\tconstructor(to: Vec2, options: IBox2dObjectOption = {}) {\r\n\t\t\t\tsuper(options);\r\n\t\t\t\t\r\n\t\t\t\t//this._box2dData.vertices = vertices;\r\n\t\t\t\t\r\n\t\t\t\tconst fixtureDef = this.getFixtureDefs()[0];\r\n\t\t\t\tfixtureDef.shape = new PolygonShape();\r\n\t\t\t\tfixtureDef.shape.SetAsEdge({ x: 0, y: 0 }, { x: to.x * Conf.PixiToBox2d, y: to.y * Conf.PixiToBox2d });\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n}\r\n\r\n/**\r\n * @ignore\r\n */\r\nexport import Edge = PIXI.box2d.Edge;\r\n\r\n/**\r\n * @ignore\r\n */\r\n//export import IEdgeData = PIXI.box2d.IEdgeData;","import { IInitializeOption, initializeOption } from './Conf';\r\nimport { Application } from 'pixi.js';\r\nimport { WorldContainer } from './WorldContainer';\r\nimport { DebugDraw } from './Box2dAlias';\r\nimport { Box2dToPixi } from './Conf';\r\n\r\n/**\r\n * @ignore\r\n */\r\nlet _isInit = false;\r\n\r\nnamespace PIXI {\r\n\texport namespace box2d {\r\n\t\t/**\r\n\t\t * @return Returns itself for the method chaining.\r\n\t\t */\r\n\t\texport function init(options: IInitializeOption = {}) {\r\n\t\t\tif (_isInit) {\r\n\t\t\t\tconsole.warn('[PIXI-box2d] Already initialized.');\r\n\t\t\t\treturn PIXI.box2d;\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tif (!options.ticker) {\r\n\t\t\t\tconsole.warn('[PIXI-box2d] It may not work because no default ticker is specified.');\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tinitializeOption.ticker = options.ticker;\r\n\t\t\t\r\n\t\t\t_isInit = true;\r\n\t\t\t\r\n\t\t\treturn PIXI.box2d;\r\n\t\t}\r\n\t\t\r\n\t\t/**\r\n\t\t * @param world Instance you want to debug\r\n\t\t * @param canvas The canvas element on which the content is drawn.\r\n\t\t * @return Canvas element for debug display.\r\n\t\t */\r\n\t\texport function addDebugDraw(world: WorldContainer, pixiCanvas: HTMLCanvasElement): HTMLCanvasElement {\r\n\t\t\tconst canvas = document.createElement('canvas');\r\n\t\t\tif (pixiCanvas.parentNode) {\r\n\t\t\t\tpixiCanvas.parentNode.appendChild(canvas);\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tcanvas.width = pixiCanvas.width;\r\n\t\t\tcanvas.height = pixiCanvas.height;\r\n\t\t\tcanvas.style.width = pixiCanvas.style.width;\r\n\t\t\tcanvas.style.height = pixiCanvas.style.height;\r\n\t\t\tcanvas.style.top = pixiCanvas.style.top || '0';\r\n\t\t\tcanvas.style.left = pixiCanvas.style.left || '0';\r\n\t\t\tcanvas.style.position = 'absolute';\r\n\t\t\tcanvas.style.pointerEvents = 'none';\r\n\t\t\tcanvas.style.zIndex = '100';\r\n\t\t\t\r\n\t\t\tconst debugDraw = new DebugDraw();\r\n\t\t\tdebugDraw.SetSprite(canvas.getContext('2d'));\r\n\t\t\tdebugDraw.SetDrawScale(Box2dToPixi);\r\n\t\t\tdebugDraw.SetFillAlpha(0.5);\r\n\t\t\tdebugDraw.SetLineThickness(1);\r\n\t\t\tdebugDraw.SetFlags(DebugDraw.e_shapeBit | DebugDraw.e_jointBit);\r\n\t\t\t\r\n\t\t\tworld.world.SetDebugDraw(debugDraw);\r\n\t\t\t\r\n\t\t\treturn canvas;\r\n\t\t}\r\n\t}\r\n}\r\n\r\n/**\r\n * @ignore\r\n */\r\nexport { IInitializeOption };\r\n\r\n/**\r\n * @ignore\r\n */\r\nexport import init = PIXI.box2d.init;\r\n\r\n/**\r\n * @ignore\r\n */\r\nexport import addDebugDraw = PIXI.box2d.addDebugDraw;"],"names":["PIXI","Vec2","Common","Math","b2Vec2","DebugDraw","Dynamics","b2DebugDraw","World","b2World","ContactListener","Contacts","box2dContact","b2ContactListener","BodyDef","b2BodyDef","FixtureDef","b2FixtureDef","Body","b2Body","CircleShape","Collision","Shapes","b2CircleShape","PolygonShape","b2PolygonShape","b2EdgeShape","box2d","ContainerBase","PixiContainer","PixiToBox2d","initializeOption","ticker","beginContactHandler","contact","const","dataA","GetFixtureA","GetUserData","dataB","GetFixtureB","emit","endContactHandler","preSolveHandler","postSolveHandler","WorldContainer","options","super","gravityX","gravityY","allowSleep","world","this","_box2dData","listener","enabled","speed","targets","deletes","on","add","_handleTick","remove","listenBeginContact","BeginContact","listenEndContact","EndContact","listenPreSolve","PreSolve","listenPostSolve","PostSolve","SetContactListener","box2dEnabled","delta","Step","ClearForces","DrawDebugData","let","i","b2d","DestroyBody","body","position","GetPosition","x","y","rotation","GetAngle","prototypeAccessors","flag","addBox2d","CreateBody","getBodyDef","fixtureDefs","getFixtureDefs","length","CreateFixture","SetPosition","SetAngle","addChild","box2dID","removeBox2d","removeChild","createBodyDef","isDynamic","bodyDef","type","b2_dynamicBody","b2_staticBody","dynamicBodyDef","staticBodyDef","createFixtureDef","pixi","fixtureDef","density","friction","restitution","filter","categoryBits","maskBits","isSensor","userData","descriptors","positionX","Object","getOwnPropertyDescriptor","ObservablePoint","prototype","positionY","positionSet","set","DisplayObject","Box2dObject","id","_id","isStatic","opponent","get","call","p","addMask","bits","list","GetFixtureList","data","GetFilterData","SetFilterData","GetNext","addAllMask","removeMask","removeAllMask","toDynamic","SetType","toStatic","Circle","radius","shape","Conf.PixiToBox2d","from","max","width","height","c","b","getLocalBounds","Rectangle","SetAsArray","Polygon","vertices","Edge","to","SetAsEdge","_isInit","console","warn","pixiCanvas","canvas","document","createElement","parentNode","appendChild","style","top","left","pointerEvents","zIndex","debugDraw","SetSprite","getContext","SetDrawScale","SetFillAlpha","SetLineThickness","SetFlags","e_shapeBit","e_jointBit","SetDebugDraw","init","addDebugDraw"],"mappings":"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"}