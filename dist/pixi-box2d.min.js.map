{"version":3,"file":"pixi-box2d.min.js","sources":["../src/ContainerBase.ts","../src/Box2dAlias.ts","../src/WorldContainer.ts","../src/Conf.ts","../src/Box2dObject.ts","../src/Circle.ts","../src/Rectangle.ts","../src/Polygon.ts","../src/Edge.ts","../src/core.ts"],"sourcesContent":["import { Container as PixiContainer } from 'pixi.js';\r\n\r\nnamespace PIXI {\r\n\texport namespace box2d {\r\n\t\t/**\r\n\t\t * @see http://pixijs.download/release/docs/PIXI.Container.html\r\n\t\t */\r\n\t\texport class ContainerBase extends PixiContainer {}\r\n\t}\r\n}\r\n\r\n/**\r\n * @ignore\r\n */\r\nexport import ContainerBase = PIXI.box2d.ContainerBase;","import { Dynamics, Collision, Common } from 'box2dweb';\r\n\r\n/**\r\n * @ignore\r\n */\r\nexport import Vec2 = Common.Math.b2Vec2;\r\n\r\n/**\r\n * @ignore\r\n */\r\nexport import DebugDraw = Dynamics.b2DebugDraw;\r\n\r\n/**\r\n * @ignore\r\n */\r\nexport import World = Dynamics.b2World;\r\n\r\n/**\r\n * @ignore\r\n */\r\nexport import Contact = Dynamics.Contacts.box2dContact;\r\n\r\n/**\r\n * @ignore\r\n */\r\nexport import ContactListener = Dynamics.b2ContactListener;\r\n\r\n/**\r\n * @ignore\r\n */\r\nexport import BodyDef = Dynamics.b2BodyDef;\r\n\r\n/**\r\n * @ignore\r\n */\r\nexport import FixtureDef = Dynamics.b2FixtureDef;\r\n\r\n/**\r\n * @ignore\r\n */\r\nexport import Body = Dynamics.b2Body;\r\n\r\n/**\r\n * @ignore\r\n */\r\nexport import CircleShape = Collision.Shapes.b2CircleShape;\r\n\r\n/**\r\n * @ignore\r\n */\r\nexport import PolygonShape = Collision.Shapes.b2PolygonShape;\r\n\r\n/**\r\n * @ignore\r\n */\r\nexport import EdgeShape = Collision.Shapes.b2EdgeShape;","import { Application, Ticker } from 'pixi.js';\r\nimport { Vec2, World, Contact, ContactListener } from './Box2dAlias';\r\nimport { Box2dObject } from './Box2dObject';\r\nimport { ContainerBase } from './ContainerBase';\r\nimport { initializeOption, Box2dToPixi, PixiToBox2d } from './Conf';\r\n\r\nnamespace PIXI {\r\n\texport namespace box2d {\r\n\t\texport interface IWorldContainerData {\r\n\t\t\tworld: World,\r\n\t\t\tlistener: ContactListener,\r\n\t\t\tenabled: boolean,\r\n\t\t\tspeed: number,\r\n\t\t\ttargets: { [id: number]: Box2dObject },\r\n\t\t\tdeletes: { [id: number]: Box2dObject },\r\n\t\t\tticker?: Ticker\r\n\t\t};\r\n\t\t\r\n\t\texport interface IWorldContainerOption {\r\n\t\t\tgravityX?: number,\r\n\t\t\tgravityY?: number,\r\n\t\t\tallowSleep?: boolean,\r\n\t\t\tlistenBeginContact?: boolean,\r\n\t\t\tlistenEndContact?: boolean,\r\n\t\t\tlistenPreSolve?: boolean,\r\n\t\t\tlistenPostSolve?: boolean,\r\n\t\t\tticker?: Ticker\r\n\t\t};\r\n\t\t\r\n\t\t/**\r\n\t\t * @ignore\r\n\t\t */\r\n\t\tfunction beginContactHandler(contact: Contact) {\r\n\t\t\tconst dataA = contact.GetFixtureA().GetUserData();\r\n\t\t\tconst dataB = contact.GetFixtureB().GetUserData();\r\n\t\t\t\r\n\t\t\tdataA && dataA.emit && dataA.emit('BeginContact', dataB);\r\n\t\t\tdataB && dataB.emit && dataB.emit('BeginContact', dataA);\r\n\t\t}\r\n\t\t\r\n\t\t/**\r\n\t\t * @ignore\r\n\t\t */\r\n\t\tfunction endContactHandler(contact: Contact) {\r\n\t\t\tconst dataA = contact.GetFixtureA().GetUserData();\r\n\t\t\tconst dataB = contact.GetFixtureB().GetUserData();\r\n\t\t\t\r\n\t\t\tdataA && dataA.emit && dataA.emit('EndContact', dataB);\r\n\t\t\tdataB && dataB.emit && dataB.emit('EndContact', dataA);\r\n\t\t}\r\n\t\t\r\n\t\t/**\r\n\t\t * @ignore\r\n\t\t */\r\n\t\tfunction preSolveHandler(contact: Contact) {\r\n\t\t\tconst dataA = contact.GetFixtureA().GetUserData();\r\n\t\t\tconst dataB = contact.GetFixtureB().GetUserData();\r\n\t\t\t\r\n\t\t\tdataA && dataA.emit && dataA.emit('PreSolve', dataB);\r\n\t\t\tdataB && dataB.emit && dataB.emit('PreSolve', dataA);\r\n\t\t}\r\n\t\t\r\n\t\t/**\r\n\t\t * @ignore\r\n\t\t */\r\n\t\tfunction postSolveHandler(contact: Contact) {\r\n\t\t\tconst dataA = contact.GetFixtureA().GetUserData();\r\n\t\t\tconst dataB = contact.GetFixtureB().GetUserData();\r\n\t\t\t\r\n\t\t\tdataA && dataA.emit && dataA.emit('PostSolve', dataB);\r\n\t\t\tdataB && dataB.emit && dataB.emit('PostSolve', dataA);\r\n\t\t}\r\n\t\t\r\n\t\texport class WorldContainer extends ContainerBase {\r\n\t\t\tprivate _box2dData: IWorldContainerData;\r\n\t\t\t\r\n\t\t\tconstructor(options: IWorldContainerOption = {}) {\r\n\t\t\t\tsuper();\r\n\t\t\t\t\r\n\t\t\t\tconst gravityX = typeof(options.gravityX) === 'number' ? options.gravityX : 0;\r\n\t\t\t\tconst gravityY = typeof(options.gravityY) === 'number' ? options.gravityY : 9.8;\r\n\t\t\t\tconst allowSleep = !!options.allowSleep;\r\n\t\t\t\t\r\n\t\t\t\tconst world = new World(new Vec2(gravityX, gravityY), allowSleep);\r\n\t\t\t\t\r\n\t\t\t\tthis._box2dData = {\r\n\t\t\t\t\tworld,\r\n\t\t\t\t\tlistener: new ContactListener(),\r\n\t\t\t\t\tenabled: true,\r\n\t\t\t\t\tspeed: 1,\r\n\t\t\t\t\ttargets: {},\r\n\t\t\t\t\tdeletes: {},\r\n\t\t\t\t\tticker: options.ticker\r\n\t\t\t\t};\r\n\t\t\t\t\r\n\t\t\t\tthis.on('added', () => {\r\n\t\t\t\t\tthis._box2dData.ticker = this._box2dData.ticker || initializeOption.ticker;\r\n\t\t\t\t\tthis._box2dData.ticker.add(this._handleTick, this);\r\n\t\t\t\t});\r\n\t\t\t\t\r\n\t\t\t\tthis.on('removed', () => {\r\n\t\t\t\t\tthis._box2dData.ticker.remove(this._handleTick, this);\r\n\t\t\t\t});\r\n\t\t\t\t\r\n\t\t\t\tconst listener = this._box2dData.listener;\r\n\t\t\t\tif (options.listenBeginContact) {\r\n\t\t\t\t\tlistener.BeginContact = beginContactHandler;\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\tif (options.listenEndContact) {\r\n\t\t\t\t\tlistener.EndContact = endContactHandler;\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\tif (options.listenPreSolve) {\r\n\t\t\t\t\tlistener.PreSolve = preSolveHandler;\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\tif (options.listenPostSolve) {\r\n\t\t\t\t\tlistener.PostSolve = postSolveHandler;\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\tworld.SetContactListener(listener);\r\n\t\t\t\t\r\n\t\t\t\tthis.box2dEnabled = true\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tprivate _handleTick(delta: number) {\r\n\t\t\t\tif (!this._box2dData.enabled) {\r\n\t\t\t\t\treturn;\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\tconst world = this._box2dData.world;\r\n\t\t\t\t\r\n\t\t\t\tworld.Step(delta * this._box2dData.speed / 30, 10, 10);\r\n\t\t\t\tworld.ClearForces();\r\n\t\t\t\tworld.DrawDebugData();\r\n\t\t\t\t\r\n\t\t\t\tconst targets = this._box2dData.targets;\r\n\t\t\t\t\r\n\t\t\t\tfor (let i in this._box2dData.deletes) {\r\n\t\t\t\t\tconst b2d = this._box2dData.deletes[i];\r\n\t\t\t\t\tdelete(targets[i]);\r\n\t\t\t\t\tworld.DestroyBody(b2d.body);\r\n\t\t\t\t\tb2d.body = null;\r\n\t\t\t\t}\r\n\t\t\t\tthis._box2dData.deletes = [];\r\n\t\t\t\t\r\n\t\t\t\tfor (let i in targets) {\r\n\t\t\t\t\tconst b2d = targets[i];\r\n\t\t\t\t\t\r\n\t\t\t\t\tconst position = b2d.body.GetPosition();\r\n\t\t\t\t\t\r\n\t\t\t\t\tb2d.x = position.x * Box2dToPixi;\r\n\t\t\t\t\tb2d.y = position.y * Box2dToPixi;\r\n\t\t\t\t\tb2d.rotation = b2d.body.GetAngle();\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tget speed() {\r\n\t\t\t\treturn this._box2dData.speed;\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tset speed(speed: number) {\r\n\t\t\t\tthis._box2dData.speed = speed;\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tget box2dEnabled() {\r\n\t\t\t\treturn this._box2dData.enabled;\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tset box2dEnabled(flag: boolean) {\r\n\t\t\t\tthis._box2dData.enabled = flag;\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tget world(): World {\r\n\t\t\t\treturn this._box2dData.world;\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\taddBox2d(b2d: Box2dObject) {\r\n\t\t\t\tif (!b2d.body) {\r\n\t\t\t\t\tconst body = this._box2dData.world.CreateBody(b2d.getBodyDef());\r\n\t\t\t\t\tconst fixtureDefs = b2d.getFixtureDefs();\r\n\t\t\t\t\t\r\n\t\t\t\t\tfor (let i = 0; i < fixtureDefs.length; i++) {\r\n\t\t\t\t\t\tbody.CreateFixture(fixtureDefs[i]);\r\n\t\t\t\t\t}\r\n\t\t\t\t\t\r\n\t\t\t\t\tb2d.body = body;\r\n\t\t\t\t\t\r\n\t\t\t\t\tbody.SetPosition({ x: b2d.x * PixiToBox2d, y: b2d.y * PixiToBox2d });\r\n\t\t\t\t\tbody.SetAngle(b2d.rotation);\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\t/*\r\n\t\t\t\tb2d.once('added', () => {\r\n\t\t\t\t\tthis._box2dData.targets[b2d.box2dID] = b2d;\r\n\t\t\t\t\t\r\n\t\t\t\t\tb2d.once('removed', () => {\r\n\t\t\t\t\t\tdelete(this._box2dData.targets[id]);\r\n\t\t\t\t\t\tthis._box2dData.world.DestroyBody(b2d.body);\r\n\t\t\t\t\t\tb2d.body = null;\r\n\t\t\t\t\t});\r\n\t\t\t\t});\r\n\t\t\t\t*/\r\n\t\t\t\t\r\n\t\t\t\tthis.addChild(b2d);\r\n\t\t\t\tthis._box2dData.targets[b2d.box2dID] = b2d;\r\n\t\t\t\tdelete(this._box2dData.deletes[b2d.box2dID]);\r\n\t\t\t\t\r\n\t\t\t\treturn b2d;\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tremoveBox2d(b2d: Box2dObject) {\r\n\t\t\t\tthis.removeChild(b2d);\r\n\t\t\t\tthis._box2dData.deletes[b2d.box2dID] = b2d;\r\n\t\t\t\t\r\n\t\t\t\treturn b2d;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n}\r\n\r\n/**\r\n * @ignore\r\n */\r\nexport import WorldContainer = PIXI.box2d.WorldContainer;\r\n\r\n/**\r\n * @ignore\r\n */\r\nexport import IWorldContainerData = PIXI.box2d.IWorldContainerData;\r\n\r\n/**\r\n * @ignore\r\n */\r\nexport import IWorldContainerOption = PIXI.box2d.IWorldContainerOption;","import { Ticker } from 'pixi.js';\r\n\r\nnamespace PIXI {\r\n\texport namespace box2d {\r\n\t\texport interface IInitializeOption {\r\n\t\t\t/**\r\n\t\t\t * Ticker that synchronizes the processing of box2dweb.\r\n\t\t\t * \r\n\t\t\t * @see http://pixijs.download/v5.3.2/docs/PIXI.Ticker_.html\r\n\t\t\t */\r\n\t\t\tticker?: Ticker\r\n\t\t}\r\n\t}\r\n}\r\n\r\n/**\r\n * @ignore\r\n */\r\nexport const Box2dToPixi = 30;\r\n\r\n/**\r\n * @ignore\r\n */\r\nexport const PixiToBox2d = 1 / Box2dToPixi;\r\n\r\n/**\r\n * @ignore\r\n */\r\nexport import IInitializeOption = PIXI.box2d.IInitializeOption;\r\n\r\n/**\r\n * @ignore\r\n */\r\nexport const initializeOption: PIXI.box2d.IInitializeOption = {\r\n\tticker: null\r\n};","import { DisplayObject, Container, ObservablePoint } from 'pixi.js';\r\nimport { BodyDef, FixtureDef, Body } from './Box2dAlias';\r\nimport { Box2dToPixi, PixiToBox2d } from './Conf';\r\nimport { ContainerBase } from './ContainerBase';\r\n\r\nnamespace PIXI {\r\n\texport namespace box2d {\r\n\t\texport interface IBox2dObjectOption {\r\n\t\t\tdensity?: number,\r\n\t\t\tfriction?: number,\r\n\t\t\trestitution?: number,\r\n\t\t\tisStatic?: boolean\r\n\t\t\t\r\n\t\t\t/**\r\n\t\t\t * The logical sum of the bits representing the collision detection category to which it belongs.\r\n\t\t\t */\r\n\t\t\tcategoryBits?: number,\r\n\t\t\t\r\n\t\t\t/**\r\n\t\t\t * The logical sum of the \"categoryBits\" for which collision detection with itself is performed.\r\n\t\t\t */\r\n\t\t\tmaskBits?: number,\r\n\t\t\t\r\n\t\t\t/**\r\n\t\t\t * Whether it is a sensor that judges only the overlap of coordinates.\r\n\t\t\t */\r\n\t\t\tisSensor?: boolean\r\n\t\t};\r\n\t\t\r\n\t\t/**\r\n\t\t * @private\r\n\t\t */\r\n\t\ttype TBox2dObjectBody = Body | null;\r\n\t\t\r\n\t\texport interface IBox2dObjectData {\r\n\t\t\tid: number,\r\n\t\t\tbody: TBox2dObjectBody,\r\n\t\t\tbodyDef: BodyDef,\r\n\t\t\tfixtureDefs: FixtureDef[],\r\n\t\t\tpixi?: Container\r\n\t\t};\r\n\t\t\r\n\t\t/**\r\n\t\t * @ignore\r\n\t\t */\r\n\t\tfunction createBodyDef(isDynamic: boolean = false) {\r\n\t\t\tconst bodyDef = new BodyDef();\r\n\t\t\tisDynamic ? bodyDef.type = Body.b2_dynamicBody : Body.b2_staticBody;\r\n\t\t\t\r\n\t\t\treturn bodyDef;\r\n\t\t}\r\n\t\t\r\n\t\t/**\r\n\t\t * @ignore\r\n\t\t */\r\n\t\tconst dynamicBodyDef: BodyDef = createBodyDef(true);\r\n\t\t\r\n\t\t/**\r\n\t\t * @ignore\r\n\t\t */\r\n\t\tconst staticBodyDef: BodyDef = createBodyDef(false);\r\n\t\t\r\n\t\t/**\r\n\t\t * @ignore\r\n\t\t */\r\n\t\tfunction createFixtureDef(options: IBox2dObjectOption = {}, pixi: Container) {\r\n\t\t\tconst fixtureDef = new FixtureDef();\r\n\t\t\t\r\n\t\t\tfixtureDef.density = typeof(options.density) === 'number' ? options.density : fixtureDef.density;\r\n\t\t\tfixtureDef.friction = typeof(options.friction) === 'number' ? options.friction : fixtureDef.friction;\r\n\t\t\tfixtureDef.restitution = typeof(options.restitution) === 'number' ? options.restitution : fixtureDef.restitution;\r\n\t\t\tfixtureDef.filter.categoryBits = typeof(options.categoryBits) === 'number' ? options.categoryBits : fixtureDef.filter.categoryBits;\r\n\t\t\tfixtureDef.filter.maskBits = typeof(options.maskBits) === 'number' ? options.maskBits : fixtureDef.filter.maskBits;\r\n\t\t\tfixtureDef.isSensor = !!options.isSensor;\r\n\t\t\tfixtureDef.userData = pixi;\r\n\t\t\t\r\n\t\t\treturn fixtureDef;\r\n\t\t}\r\n\t\t\r\n\t\t/**\r\n\t\t * @ignore\r\n\t\t */\r\n\t\tconst descriptors = {\r\n\t\t\tpositionX: Object.getOwnPropertyDescriptor(ObservablePoint.prototype, 'x'),\r\n\t\t\tpositionY: Object.getOwnPropertyDescriptor(ObservablePoint.prototype, 'y'),\r\n\t\t\tpositionSet: ObservablePoint.prototype.set,\r\n\t\t\trotation: Object.getOwnPropertyDescriptor(DisplayObject.prototype, 'rotation')\r\n\t\t};\r\n\t\t\r\n\t\texport class Box2dObject extends ContainerBase {\r\n\t\t\tprotected _box2dData: IBox2dObjectData;\r\n\t\t\tprivate static _id: number = 0;\r\n\t\t\t\r\n\t\t\t/**\r\n\t\t\t * When objects come into contact with each other.\r\n\t\t\t * @event\r\n\t\t\t * @param opponent The object to collide with.\r\n\t\t\t */\r\n\t\t\tBeginContact(opponent: Box2dObject) {}\r\n\t\t\t\r\n\t\t\t/**\r\n\t\t\t * When objects are separated from each other.\r\n\t\t\t * @event\r\n\t\t\t * @param opponent The object to collide with.\r\n\t\t\t */\r\n\t\t\tEndContact(opponent: Box2dObject) {}\r\n\t\t\t\r\n\t\t\t/**\r\n\t\t\t * Immediately before performing contact processing between objects.<br />\r\n\t\t\t * It will not fire if at least one is \"isSensor = true\".\r\n\t\t\t * @event\r\n\t\t\t * @param opponent The object to collide with.\r\n\t\t\t */\r\n\t\t\tPreSolve(opponent: Box2dObject) {}\r\n\t\t\t\r\n\t\t\t/**\r\n\t\t\t * Immediately after performing contact processing between objects.<br />\r\n\t\t\t * It will not fire if at least one is \"isSensor = true\".\r\n\t\t\t * @event\r\n\t\t\t * @param opponent The object to collide with.\r\n\t\t\t */\r\n\t\t\tPostSolve(opponent: Box2dObject) {}\r\n\t\t\t\r\n\t\t\tconstructor(options: IBox2dObjectOption = {}) {\r\n\t\t\t\tsuper();\r\n\t\t\t\t\r\n\t\t\t\tthis._box2dData = {\r\n\t\t\t\t\tid: Box2dObject._id++,\r\n\t\t\t\t\tbody: null,\r\n\t\t\t\t\tbodyDef: options.isStatic ? staticBodyDef : dynamicBodyDef,\r\n\t\t\t\t\tfixtureDefs: [createFixtureDef(options, this)],\r\n\t\t\t\t\tpixi: null\r\n\t\t\t\t};\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tgetBodyDef() {\r\n\t\t\t\treturn this._box2dData.bodyDef;\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tgetFixtureDefs() {\r\n\t\t\t\treturn this._box2dData.fixtureDefs;\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tget box2dID() {\r\n\t\t\t\treturn this._box2dData.id;\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tget body(): TBox2dObjectBody {\r\n\t\t\t\treturn this._box2dData.body;\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tset body(body: TBox2dObjectBody) {\r\n\t\t\t\tthis._box2dData.body = body;\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tget x() {\r\n\t\t\t\treturn descriptors.positionX.get.call(this.position);\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tset x(x: number) {\r\n\t\t\t\tdescriptors.positionX.set.call(this.position, x);\r\n\t\t\t\t\r\n\t\t\t\tconst body = this._box2dData.body;\r\n\t\t\t\tif (!body) {\r\n\t\t\t\t\treturn;\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\tconst p = body.GetPosition();\r\n\t\t\t\tp.x = x * PixiToBox2d;\r\n\t\t\t\tbody.SetPosition(p);\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tget y() {\r\n\t\t\t\treturn descriptors.positionY.get.call(this.position);\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tset y(y: number) {\r\n\t\t\t\tdescriptors.positionY.set.call(this.position, y);\r\n\t\t\t\t\r\n\t\t\t\tconst body = this._box2dData.body;\r\n\t\t\t\tif (!body) {\r\n\t\t\t\t\treturn;\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\tconst p = body.GetPosition();\r\n\t\t\t\tp.y = y * PixiToBox2d;\r\n\t\t\t\tbody.SetPosition(p);\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tget rotation() {\r\n\t\t\t\treturn descriptors.rotation.get.call(this);\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tset rotation(rotation: number) {\r\n\t\t\t\tdescriptors.rotation.set.call(this, rotation);\r\n\t\t\t\t\r\n\t\t\t\tconst body = this._box2dData.body;\r\n\t\t\t\tif (!body) {\r\n\t\t\t\t\treturn;\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\tbody.SetAngle(rotation);\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\t/**\r\n\t\t\t * Adds the object with the specified \"category Bits\" to collision detection.\r\n\t\t\t */\r\n\t\t\taddMask(bits: number) {\r\n\t\t\t\tlet list = this._box2dData.body.GetFixtureList();\r\n\t\t\t\t\r\n\t\t\t\twhile (list) {\r\n\t\t\t\t\tconst data = list.GetFilterData();\r\n\t\t\t\t\tdata.maskBits |= bits;\r\n\t\t\t\t\tlist.SetFilterData(data);\r\n\t\t\t\t\t\r\n\t\t\t\t\tlist = list.GetNext();\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\t/**\r\n\t\t\t * Set to perform collision detection with all objects.\r\n\t\t\t */\r\n\t\t\taddAllMask() {\r\n\t\t\t\tlet list = this._box2dData.body.GetFixtureList();\r\n\t\t\t\t\r\n\t\t\t\twhile (list) {\r\n\t\t\t\t\tconst data = list.GetFilterData();\r\n\t\t\t\t\tdata.maskBits = 65535;\r\n\t\t\t\t\tlist.SetFilterData(data);\r\n\t\t\t\t\t\r\n\t\t\t\t\tlist = list.GetNext();\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\t/**\r\n\t\t\t * Removes the object with the specified \"category bit\" from collision detection.\r\n\t\t\t */\r\n\t\t\tremoveMask(bits: number) {\r\n\t\t\t\tlet list = this._box2dData.body.GetFixtureList();\r\n\t\t\t\t\r\n\t\t\t\twhile (list) {\r\n\t\t\t\t\tconst data = list.GetFilterData();\r\n\t\t\t\t\tdata.maskBits ^= data.maskBits & bits;\r\n\t\t\t\t\tlist.SetFilterData(data);\r\n\t\t\t\t\t\r\n\t\t\t\t\tlist = list.GetNext();\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\t/**\r\n\t\t\t * Set not to perform collision detection with any object.\r\n\t\t\t */\r\n\t\t\tremoveAllMask() {\r\n\t\t\t\tlet list = this._box2dData.body.GetFixtureList();\r\n\t\t\t\t\r\n\t\t\t\twhile (list) {\r\n\t\t\t\t\tconst data = list.GetFilterData();\r\n\t\t\t\t\tdata.maskBits = 0;\r\n\t\t\t\t\tlist.SetFilterData(data);\r\n\t\t\t\t\t\r\n\t\t\t\t\tlist = list.GetNext();\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\ttoDynamic() {\r\n\t\t\t\tif (!this._box2dData.body) {\r\n\t\t\t\t\treturn;\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\tthis._box2dData.body.SetType(Body.b2_dynamicBody);\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\ttoStatic() {\r\n\t\t\t\tif (!this._box2dData.body) {\r\n\t\t\t\t\treturn;\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\tthis._box2dData.body.SetType(Body.b2_staticBody);\r\n\t\t\t}\r\n\t\t}\r\n\t\t\r\n\t\tdelete(Box2dObject.prototype.BeginContact);\r\n\t\tdelete(Box2dObject.prototype.EndContact);\r\n\t\tdelete(Box2dObject.prototype.PreSolve);\r\n\t\tdelete(Box2dObject.prototype.PostSolve);\r\n\t}\r\n}\r\n\r\n/**\r\n * @ignore\r\n */\r\nexport import Box2dObject = PIXI.box2d.Box2dObject;\r\n\r\n/**\r\n * @ignore\r\n */\r\nexport import IBox2dObjectOption = PIXI.box2d.IBox2dObjectOption;\r\n\r\n/**\r\n * @ignore\r\n */\r\nexport import IBox2dObjectData = PIXI.box2d.IBox2dObjectData;","import { Container as PixiContainer } from 'pixi.js';\r\nimport { CircleShape } from './Box2dAlias';\r\nimport { Box2dObject, IBox2dObjectData, IBox2dObjectOption } from './Box2dObject';\r\nimport * as Conf from './Conf';\r\n\r\nnamespace PIXI {\r\n\texport namespace box2d {\r\n\t\t/*\r\n\t\texport interface ICircleData extends IBox2dObjectData {\r\n\t\t\tradius: number\r\n\t\t};\r\n\t\t*/\r\n\t\t\r\n\t\texport class Circle extends Box2dObject {\r\n\t\t\t//protected _box2dData: ICircleData;\r\n\t\t\t\r\n\t\t\tconstructor(radius: number, options: IBox2dObjectOption = {}) {\r\n\t\t\t\tsuper(options);\r\n\t\t\t\t\r\n\t\t\t\t//this._box2dData.radius = radius;\r\n\t\t\t\t\r\n\t\t\t\tconst fixtureDef = this.getFixtureDefs()[0];\r\n\t\t\t\tfixtureDef.shape = new CircleShape(radius * Conf.PixiToBox2d);\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\t/**\r\n\t\t\t * Create a \"Circle\" instance whose radius is the larger width or height of the \"PIXI.Container\" instance at that point.\r\n\t\t\t * Note that if you change the shape of the \"PIXI.Container\" instance after creating this method, the appearance and collision detection will not match.\r\n\t\t\t */\r\n\t\t\tstatic from(pixi: PixiContainer, options: IBox2dObjectOption = {}) {\r\n\t\t\t\tconst b2d = new Circle(Math.max(pixi.width / 2, pixi.height/ 2), options);\r\n\t\t\t\t\r\n\t\t\t\tconst c = b2d.addChild(new PixiContainer());\r\n\t\t\t\tc.addChild(pixi);\r\n\t\t\t\t\r\n\t\t\t\tconst b = b2d.getLocalBounds();\r\n\t\t\t\tc.x = -b.x - pixi.width / 2;\r\n\t\t\t\tc.y = -b.y - pixi.height / 2;\r\n\t\t\t\t\r\n\t\t\t\treturn b2d;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n}\r\n\r\n/**\r\n * @ignore\r\n */\r\nexport import Circle = PIXI.box2d.Circle;\r\n\r\n/**\r\n * @ignore\r\n */\r\n//export import ICircleData = PIXI.box2d.ICircleData;","import { Container as PixiContainer } from 'pixi.js';\r\nimport { Vec2, PolygonShape } from './Box2dAlias';\r\nimport { Box2dObject, IBox2dObjectData, IBox2dObjectOption } from './Box2dObject';\r\nimport * as Conf from './Conf';\r\n\r\nnamespace PIXI {\r\n\texport namespace box2d {\r\n\t\t/*\r\n\t\texport interface IRectangleData extends IBox2dObjectData {\r\n\t\t\twidth: number,\r\n\t\t\theight: number\r\n\t\t};\r\n\t\t*/\r\n\t\t\r\n\t\texport class Rectangle extends Box2dObject {\r\n\t\t\t//protected _box2dData: IRectangleData;\r\n\t\t\t\r\n\t\t\tconstructor(width: number, height: number, options: IBox2dObjectOption = {}) {\r\n\t\t\t\tsuper(options);\r\n\t\t\t\t\r\n\t\t\t\twidth *= Conf.PixiToBox2d;\r\n\t\t\t\theight *= Conf.PixiToBox2d;\r\n\t\t\t\t\r\n\t\t\t\tconst fixtureDef = this.getFixtureDefs()[0];\r\n\t\t\t\tfixtureDef.shape = new PolygonShape();\r\n\t\t\t\tfixtureDef.shape.SetAsArray([\r\n\t\t\t\t\tnew Vec2(0, 0),\r\n\t\t\t\t\tnew Vec2(width, 0),\r\n\t\t\t\t\tnew Vec2(width, height),\r\n\t\t\t\t\tnew Vec2(0, height)\r\n\t\t\t\t]);\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\t/**\r\n\t\t\t * Create a \"Rectangle\" instance that circumscribes the shape of the \"PIXI.Container\" instance at that point.\r\n\t\t\t * Note that if you change the shape of the \"PIXI.Container\" instance after creating this method, the appearance and collision detection will not match.\r\n\t\t\t */\r\n\t\t\tstatic from(pixi: PixiContainer, options: IBox2dObjectOption = {}) {\r\n\t\t\t\tconst b2d = new Rectangle(pixi.width, pixi.height, options);\r\n\t\t\t\t\r\n\t\t\t\tconst c = b2d.addChild(new PixiContainer());\r\n\t\t\t\tc.addChild(pixi);\r\n\t\t\t\t\r\n\t\t\t\tconst b = b2d.getLocalBounds();\r\n\t\t\t\tc.x = -b.x;\r\n\t\t\t\tc.y = -b.y;\r\n\t\t\t\t\r\n\t\t\t\treturn b2d;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n}\r\n\r\n/**\r\n * @ignore\r\n */\r\nexport import Rectangle = PIXI.box2d.Rectangle;\r\n\r\n/**\r\n * @ignore\r\n */\r\n//export import IRectangleData = PIXI.box2d.IRectangleData;","import { Vec2, PolygonShape } from './Box2dAlias';\r\nimport { Box2dObject, IBox2dObjectData, IBox2dObjectOption } from './Box2dObject';\r\nimport * as Conf from './Conf';\r\n\r\nnamespace PIXI {\r\n\texport namespace box2d {\r\n\t\t/*\r\n\t\texport interface IPolygonData extends IBox2dObjectData {\r\n\t\t\tvertices: Vec2[]\r\n\t\t};\r\n\t\t*/\r\n\t\t\r\n\t\texport class Polygon extends Box2dObject {\r\n\t\t\t//protected _box2dData: IPolygonData;\r\n\t\t\t\r\n\t\t\tconstructor(vertices: Vec2[], options: IBox2dObjectOption = {}) {\r\n\t\t\t\tsuper(options);\r\n\t\t\t\t\r\n\t\t\t\t//this._box2dData.vertices = vertices;\r\n\t\t\t\t\r\n\t\t\t\tconst fixtureDef = this.getFixtureDefs()[0];\r\n\t\t\t\tfixtureDef.shape = new PolygonShape();\r\n\t\t\t\tfixtureDef.shape.SetAsArray(vertices);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n}\r\n\r\n/**\r\n * @ignore\r\n */\r\nexport import Polygon = PIXI.box2d.Polygon;\r\n\r\n/**\r\n * @ignore\r\n */\r\n//export import IPolygonData = PIXI.box2d.IPolygonData;","import { Vec2, PolygonShape } from './Box2dAlias';\r\nimport { Box2dObject, IBox2dObjectData, IBox2dObjectOption } from './Box2dObject';\r\nimport * as Conf from './Conf';\r\n\r\nnamespace PIXI {\r\n\texport namespace box2d {\r\n\t\t/*\r\n\t\texport interface IEdgeData extends IBox2dObjectData {\r\n\t\t\tvertices: Vec2[]\r\n\t\t};\r\n\t\t*/\r\n\t\t\r\n\t\texport class Edge extends Box2dObject {\r\n\t\t\t//protected _box2dData: IEdgeData;\r\n\t\t\t\r\n\t\t\tconstructor(to: Vec2, options: IBox2dObjectOption = {}) {\r\n\t\t\t\tsuper(options);\r\n\t\t\t\t\r\n\t\t\t\t//this._box2dData.vertices = vertices;\r\n\t\t\t\t\r\n\t\t\t\tconst fixtureDef = this.getFixtureDefs()[0];\r\n\t\t\t\tfixtureDef.shape = new PolygonShape();\r\n\t\t\t\tfixtureDef.shape.SetAsEdge({ x: 0, y: 0 }, { x: to.x * Conf.PixiToBox2d, y: to.y * Conf.PixiToBox2d });\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n}\r\n\r\n/**\r\n * @ignore\r\n */\r\nexport import Edge = PIXI.box2d.Edge;\r\n\r\n/**\r\n * @ignore\r\n */\r\n//export import IEdgeData = PIXI.box2d.IEdgeData;","import { IInitializeOption, initializeOption } from './Conf';\r\nimport { Application } from 'pixi.js';\r\nimport { WorldContainer } from './WorldContainer';\r\nimport { DebugDraw } from './Box2dAlias';\r\nimport { Box2dToPixi } from './Conf';\r\n\r\n/**\r\n * @ignore\r\n */\r\nlet _isInit = false;\r\n\r\nnamespace PIXI {\r\n\texport namespace box2d {\r\n\t\t/**\r\n\t\t * @return Returns itself for the method chaining.\r\n\t\t */\r\n\t\texport function init(options: IInitializeOption = {}) {\r\n\t\t\tif (_isInit) {\r\n\t\t\t\tconsole.warn('[PIXI-box2d] Already initialized.');\r\n\t\t\t\treturn PIXI.box2d;\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tif (!options.ticker) {\r\n\t\t\t\tconsole.warn('[PIXI-box2d] It may not work because no default ticker is specified.');\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tinitializeOption.ticker = options.ticker;\r\n\t\t\t\r\n\t\t\t_isInit = true;\r\n\t\t\t\r\n\t\t\treturn PIXI.box2d;\r\n\t\t}\r\n\t\t\r\n\t\t/**\r\n\t\t * @param world Instance you want to debug\r\n\t\t * @param canvas The canvas element on which the content is drawn.\r\n\t\t * @return Canvas element for debug display.\r\n\t\t */\r\n\t\texport function addDebugDraw(world: WorldContainer, pixiCanvas: HTMLCanvasElement): HTMLCanvasElement {\r\n\t\t\tconst canvas = document.createElement('canvas');\r\n\t\t\tif (pixiCanvas.parentNode) {\r\n\t\t\t\tpixiCanvas.parentNode.appendChild(canvas);\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tcanvas.width = pixiCanvas.width;\r\n\t\t\tcanvas.height = pixiCanvas.height;\r\n\t\t\tcanvas.style.width = pixiCanvas.style.width;\r\n\t\t\tcanvas.style.height = pixiCanvas.style.height;\r\n\t\t\tcanvas.style.top = pixiCanvas.style.top || '0';\r\n\t\t\tcanvas.style.left = pixiCanvas.style.left || '0';\r\n\t\t\tcanvas.style.position = 'absolute';\r\n\t\t\tcanvas.style.pointerEvents = 'none';\r\n\t\t\tcanvas.style.zIndex = '100';\r\n\t\t\t\r\n\t\t\tconst debugDraw = new DebugDraw();\r\n\t\t\tdebugDraw.SetSprite(canvas.getContext('2d'));\r\n\t\t\tdebugDraw.SetDrawScale(Box2dToPixi);\r\n\t\t\tdebugDraw.SetFillAlpha(0.5);\r\n\t\t\tdebugDraw.SetLineThickness(1);\r\n\t\t\tdebugDraw.SetFlags(DebugDraw.e_shapeBit | DebugDraw.e_jointBit);\r\n\t\t\t\r\n\t\t\tworld.world.SetDebugDraw(debugDraw);\r\n\t\t\t\r\n\t\t\treturn canvas;\r\n\t\t}\r\n\t}\r\n}\r\n\r\n/**\r\n * @ignore\r\n */\r\nexport { IInitializeOption };\r\n\r\n/**\r\n * @ignore\r\n */\r\nexport import init = PIXI.box2d.init;\r\n\r\n/**\r\n * @ignore\r\n */\r\nexport import addDebugDraw = PIXI.box2d.addDebugDraw;"],"names":["PIXI","Vec2","Common","Math","b2Vec2","DebugDraw","Dynamics","b2DebugDraw","World","b2World","ContactListener","Contacts","box2dContact","b2ContactListener","BodyDef","b2BodyDef","FixtureDef","b2FixtureDef","Body","b2Body","CircleShape","Collision","Shapes","b2CircleShape","PolygonShape","b2PolygonShape","b2EdgeShape","box2d","ContainerBase","PixiContainer","PixiToBox2d","initializeOption","ticker","beginContactHandler","contact","const","dataA","GetFixtureA","GetUserData","dataB","GetFixtureB","emit","endContactHandler","preSolveHandler","postSolveHandler","WorldContainer","options","super","gravityX","gravityY","allowSleep","world","this","_box2dData","listener","enabled","speed","targets","deletes","on","add","_handleTick","remove","listenBeginContact","BeginContact","listenEndContact","EndContact","listenPreSolve","PreSolve","listenPostSolve","PostSolve","SetContactListener","box2dEnabled","delta","Step","ClearForces","DrawDebugData","let","i","b2d","DestroyBody","body","position","GetPosition","x","y","rotation","GetAngle","prototypeAccessors","flag","addBox2d","CreateBody","getBodyDef","fixtureDefs","getFixtureDefs","length","CreateFixture","SetPosition","SetAngle","addChild","box2dID","removeBox2d","removeChild","createBodyDef","isDynamic","bodyDef","type","b2_dynamicBody","b2_staticBody","dynamicBodyDef","staticBodyDef","createFixtureDef","pixi","fixtureDef","density","friction","restitution","filter","categoryBits","maskBits","isSensor","userData","descriptors","positionX","Object","getOwnPropertyDescriptor","ObservablePoint","prototype","positionY","positionSet","set","DisplayObject","Box2dObject","id","_id","isStatic","opponent","get","call","p","addMask","bits","list","GetFixtureList","data","GetFilterData","SetFilterData","GetNext","addAllMask","removeMask","removeAllMask","toDynamic","SetType","toStatic","Circle","radius","shape","Conf.PixiToBox2d","from","max","width","height","c","b","getLocalBounds","Rectangle","SetAsArray","Polygon","vertices","Edge","to","SetAsEdge","_isInit","console","warn","pixiCanvas","canvas","document","createElement","parentNode","appendChild","style","top","left","pointerEvents","zIndex","debugDraw","SetSprite","getContext","SetDrawScale","SetFillAlpha","SetLineThickness","SetFlags","e_shapeBit","e_jointBit","SetDebugDraw","init","addDebugDraw"],"mappings":"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"}